<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="2021-09-29" climode="true" execEnv="win32_x86_64" hasViols="true" id="1634717415932" lang="ja_JP" machine="PC-3926" prjModule="FlowAnalysis" project="" tag="${scontrol_branch}-win32_x86_64" time="2021-09-29T16:27:06+09:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2020.2.0" user="bji">
   <TestConfig machine="PC-3926" name="Flow Analysis Standard" pseudoUrl="builtin://Flow Analysis Standard" user="bji" />
   <Authors>
      <Author id="dev1" name="bji" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.5.0.20201016" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.5.0.20201022B981" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.5.0.20201022B981" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.5.0.20201013B2287" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.5.0.20201022B981" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="40">
      
   </Goals>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="bji" hash="-892903586" locRef="1" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="dbutil.c" totLns="17" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/dbutil.c" />
         <Loc auth="bji" hash="2102946591" locRef="2" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="fileLeaks.c" totLns="60" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/fileLeaks.c" />
         <Loc auth="bji" hash="1502549011" locRef="3" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="memoryLeaks.c" totLns="46" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/memoryLeaks.c" />
         <Loc auth="bji" hash="1923244810" locRef="4" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="divisionByZero.c" totLns="58" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/divisionByZero.c" />
         <Loc auth="bji" hash="389143777" locRef="5" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="useBeforeInit.c" totLns="53" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/useBeforeInit.c" />
         <Loc auth="bji" hash="585379582" locRef="6" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="nullPointerDeref.c" totLns="43" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/nullPointerDeref.c" />
         <Loc auth="bji" hash="-1583021683" locRef="7" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="nullPointerDerefBenchmark.c" totLns="79" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/nullPointerDerefBenchmark.c" />
         <Loc auth="bji" hash="-1411136315" locRef="8" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="arrayOutOfBounds.c" totLns="44" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/arrayOutOfBounds.c" />
         <Loc auth="bji" hash="226867487" locRef="9" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="bufferOverflow.c" totLns="35" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/bufferOverflow.c" />
         <Loc auth="bji" hash="1398926183" locRef="10" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="unreachableCode.c" totLns="68" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/unreachableCode.c" />
         <Loc auth="bji" hash="-1138451494" locRef="11" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="sqlInjection.c" totLns="37" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/sqlInjection.c" />
         <Loc auth="bji" hash="1115766966" locRef="12" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="sql.c" totLns="12" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/sql.c" />
         <Loc auth="bji" hash="2111655268" locRef="13" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="integerOverflow.c" totLns="42" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/integerOverflow.c" />
         <Loc auth="bji" hash="-390129458" locRef="14" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="dbutil.h" totLns="10" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/dbutil.h" />
         <Loc auth="bji" hash="-829573575" locRef="15" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="socket.h" totLns="22" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/socket.h" />
         <Loc auth="bji" hash="380717242" locRef="16" projId="FlowAnalysis" projPath="/FlowAnalysis" project="FlowAnalysis" resProjPath="sql.h" totLns="28" uri="file://PC-3926/c:/envmake/vscode_git/FlowAnalysis/sql.h" />
      </Locations>
   </Scope>
   
  <SetupProblems />

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:14">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="16" checkedLns="654" id="FlowAnalysis" name="FlowAnalysis" qfixErrs="0" suppErrs="0" totErrs="40" totFiles="16" totLns="654" />
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="フロー解析" name="BD" rules="117" total="0">
               <Category authTot="0;" authUrg="0;" desc="誤った API の使用" name="BD-API" rules="6" total="0" />
               <Category authTot="29;" authUrg="29;" desc="バグの可能性" name="BD-PB" rules="64" total="29" />
               <Category authTot="5;" authUrg="5;" desc="リソース" name="BD-RES" rules="8" total="5" />
               <Category authTot="6;" authUrg="6;" desc="セキュリティ" name="BD-SECURITY" rules="17" total="6" />
               <Category authTot="0;" authUrg="0;" desc="コンテナー" name="BD-CO" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="スレッドと同期化" name="BD-TRS" rules="15" total="0" />
            </Category>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="ライブラリ関数に誤った値を渡してはならない" id="BD-API-BADPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="負の値ではない引数を期待する関数に負の値を渡してはならない" id="BD-API-NEGPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="負の値ではない引数として渡した後に負の値のチェックを行わない" id="BD-API-REVNEGPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="範囲外のイテレーターにアクセスしない" id="BD-CO-ITOUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="有効な参照、ポインター、イテレーターを使用して basic_string の要素を参照する" id="BD-CO-STRMOD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="std アルゴリズムに空のコンテナー イテレーターを宛先として渡さない" id="BD-CO-EMPCON" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="コンテナーを反復処理中に変更しない" id="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="例外を常にキャッチする" id="BD-PB-EXCEPT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="2;" cat="BD-PB" desc="初期化の前に使用しない" id="BD-PB-NOTINIT" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="7;" authUrg="7;" cat="BD-PB" desc="null ポインターの間接参照を避ける" id="BD-PB-NP" sev="1" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="不正な書式指定子によるバッファー オーバーフローを避ける" id="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="ゼロで終わっていない文字列の読み込みによるオーバーフローを避ける" id="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="バッファー読み込み時のオーバーフローを避ける" id="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="バッファー書き込み時のオーバーフローを避ける" id="BD-PB-OVERFWR" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="メソッド パラメーターの上書きを避ける" id="BD-PB-POVR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="解放済みのラップされたオブジェクトを指してはならない" id="BD-PB-WRAPESC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="2;" cat="BD-PB" desc="ゼロによる除算を避ける" id="BD-PB-ZERO" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="配列の境界を超えてアクセスしてはならない" id="BD-PB-ARRAY" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="オブジェクトの配列の要素を指すポインターを単一のオブジェクト型のスマート ポインターに渡してはならない" id="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="誤ったシフト演算を避ける" id="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="システム間でデータを送信する場合は正しいバイト順序を使用する" id="BD-PB-BYTEORD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="5;" cat="BD-PB" desc="常に同じ値に評価される条件式を避ける" id="BD-PB-CC" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="非 void 関数の戻り値をチェックする" id="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="5;" cat="BD-PB" desc="常に非 void 関数の戻り値をチェックする" id="BD-PB-CHECKRETGEN" sev="2" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="間接参照の後に null チェックしない" id="BD-PB-DEREF" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="realloc() を呼び出してオブジェクトのアラインメントを変更してはならない" id="BD-PB-DNMPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="マクロの EOF と標準ライブラリ関数から返された未変更の戻り値を比較するべきである" id="BD-PB-EOFCOMP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="errno 値を適切に使用する" id="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="終了ハンドラーを適切に定義する" id="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="fgets() または fgetws() が失敗した場合、文字列をリセットする" id="BD-PB-FGETS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="fgetpos() から返された値だけを fsetpos() に使用する" id="BD-PB-FSETPOS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="環境ポインターを無効化する可能性がある演算の後で環境ポインターに依存しない" id="BD-PB-INVENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="特定の標準ライブラリ関数から返されたポインターは、そのあとの同じ関数または関連する関数の呼び出しで使用してはならない" id="BD-PB-INVRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="標準ライブラリ関数 memcmp を null 終端文字の比較に使用してはならない" id="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="new ハンドラーを適切に定義する" id="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="例外をスローしないよう宣言された関数から例外をスローしてはならない" id="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="return するべきでない関数から return してはならない" id="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="範囲外の配列およびポインターへのアクセスを避ける" id="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="オーバーラップするオブジェクトにオブジェクトを代入またはコピーしてはならない" id="BD-PB-OVERLAP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="配列をポリモーフィックに処理しない" id="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="関連のない 2 つのポインターを比較してはならない" id="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="同じ配列の要素を指していない 2 つのポインターを減算しない" id="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="すでに所有されているポインター値を関連がないスマート ポインターに格納しない" id="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="自動変数へのポインターを引数として putenv() を呼び出さない" id="BD-PB-PUTENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="計算例外シグナル ハンドラーから return しない" id="BD-PB-SIGRETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="間にフラッシュまたは位置付けの処理を呼び出さずに交互にストリームの入力と出力を行ってはならない" id="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="std::forward に渡した引数を後で使用してはならない" id="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="移動元オブジェクトの値に依存しない" id="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-PB" desc="switch 文には到達できないブランチがあってはならない" id="BD-PB-SWITCH" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="terminate ハンドラーを適切に定義する" id="BD-PB-TERMHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="unexpected ハンドラーを適切に定義する" id="BD-PB-UNEXPHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="コンストラクターからクラスの仮想関数を呼び出さない" id="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="デストラクターからクラスの仮想関数を呼び出さない" id="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="可変長配列のサイズが有効範囲内であることを確認する" id="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="1 つのファイルを別のストリームで同時に読み取りアクセス用と書き込みアクセス用に開いてはならない" id="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="読み取り専用として開かれたストリームへの書き込みを避ける" id="BD-PB-WRROS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="整数のオーバーフローを避ける" id="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="文字列の終端がゼロであることを確認する" id="BD-PB-NZTS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="作成された std::exception オブジェクトを必ずスローする" id="BD-PB-STDEXC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="疑わしい値でストリームのフラグを設定している" id="BD-PB-STREAMFLAGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="ストリーム フォーマットの復元" id="BD-PB-STREAMFMT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="2;" cat="BD-PB" desc="未使用の値を避ける" id="BD-PB-VOVR" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="コンテナーのインデックスが有効範囲内であることを保証する" id="BD-PB-VALRANGE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="動的に割り当てられたリソースを適切に割り当て解除する" id="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="解放関数が確実にリソースを解放することを保証する" id="BD-RES-BADFREEF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="解放されたリソースを使用してはならない" id="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="指定された型のオブジェクトを格納するのに十分なメモリを割り当てる" id="BD-RES-INSUFMEM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="無効なポインタを使用してリソースを解放してはならない" id="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="5;" authUrg="5;" cat="BD-RES" desc="リソースが解放されていることを確認する" id="BD-RES-LEAKS" sev="1" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="shared_ptr の循環参照を避ける" id="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="定義された上限を超える変数をスタックに配置しない" id="BD-RES-STACKLIM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-SECURITY" desc="汚染されたデータを配列添え字として使用しない" id="BD-SECURITY-ARRAY" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="汚染されたデータによるバッファー オーバーフローを避ける" id="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="2;" cat="BD-SECURITY" desc="汚染されたデータによる整数オーバーフロー/アンダーフローを防ぐ" id="BD-SECURITY-INTOVERF" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="不正な書式制限の定義によるバッファー オーバーフローを避ける" id="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="汚染されたデータによるバッファー読み込み時のオーバーフローを避ける" id="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-SECURITY" desc="汚染されたデータによるバッファー書き込み時のオーバーフローを避ける" id="BD-SECURITY-OVERFWR" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="コマンド インジェクションから防御する" id="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-SECURITY" desc="汚染されたデータを出力コンソールに出力してはならない" id="BD-SECURITY-TDCONSOLE" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="環境変数インジェクションから防御する" id="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="ファイル名インジェクションから防御する" id="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="書式文字列からサニタイズされていないユーザー入力を除外する" id="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="1;" cat="BD-SECURITY" desc="SQL インジェクションから防御する" id="BD-SECURITY-TDSQL" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="ログ ファイルに書き込む関数に機密データを渡さない" id="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="メモリ割り当サイズの決定に使用する前に、汚染されている可能性があるデータを検証する" id="BD-SECURITY-TDALLOC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="libxerces-c で XML 外部エンティティの解決 (XXE) を無効化する" id="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="変数は単一のクリティカル セクションのコンテキストで使用するべきである" id="BD-TRS-DIFCS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="二重ロックを避ける" id="BD-TRS-DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="fork およびファイル記述子を使用する際の競合状態を避ける" id="BD-TRS-FORKFILE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="解放されていないロックを放棄してはならない" id="BD-TRS-LOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="異なる順序でロックを獲得しない" id="BD-TRS-ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="シンボリック リンクの存在を確認する際の競合状態を避ける" id="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="ロックを保持している間にブロッキング関数を使用してはならない" id="BD-TRS-TSHL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="複数の POSIX スレッドで共有されるオブジェクトは、適切な記憶域期間を持つよう宣言する" id="BD-TRS-ARG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="ファイル アクセス時の競合状態を避ける" id="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="すでに結合または切り離しされたスレッドを結合または切り離ししない" id="BD-TRS-JOINDETACH" sev="2" total="0" />
         </RulesList>
         <SeverityList>
            <Severity authTot="23;" authUrg="23;" id="1" total="23" />
            <Severity authTot="15;" authUrg="15;" id="2" total="15" />
            <Severity authTot="2;" authUrg="2;" id="3" total="2" />
         </SeverityList>
      </Rules>
      
  <Supps />

      
  <StdViols>
    <FlowViol msg="EOF マクロは、&quot;fgetc&quot;関数によって返された変更済みの値と比較されている" ln="15" locFile="/FlowAnalysis/fileLeaks.c" ruleSAFMsg="値と EOF の比較" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="15" rule="BD-PB-EOFCOMP" FirstElSrcRngStartPos="0" lnHash="161967170" ruleSCSCMsg="EOF を返すことができる関数の呼び出し" FirstElSrcRngFile="/FlowAnalysis/fileLeaks.c" rule.header="マクロの EOF と標準ライブラリ関数から返された未変更の戻り値を比較するべきである" FirstElSrcRngStartln="14" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-586924587" lang="cpp" locEndPos="0" urgent="true" locEndLn="16" goals="1," locStartln="15" sev="2" locRef="2" tool="c++test" lineHash="161967170" locType="sr" hash="2102946591" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1093133731" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="fgetc(...)" ElType=".C" rngLn="14">
          <Anns>
            <Ann msg="EOF を返すことができる関数の呼び出し" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1093133731" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="c = fgetc(file);" ElType="!" rngLn="14">
          <Anns>
            <Ann msg="int -> char のキャスト" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="161967170" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="if (c!=EOF) {" ElType=".P" rngLn="15">
          <Anns>
            <Ann msg="char -> int のキャスト" kind="comment" />
            <Ann msg="値と EOF の比較" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="汚染された ファイルからのデータ (&quot;c&quot;) が コンソール に出力された" ln="16" locFile="/FlowAnalysis/fileLeaks.c" ruleSAFMsg="危険なメソッド呼び出し" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="15" rule="BD-SECURITY-TDCONSOLE" FirstElSrcRngStartPos="0" lnHash="-1245723280" ruleSCSCMsg="汚染ポイント" FirstElSrcRngFile="/FlowAnalysis/fileLeaks.c" rule.header="汚染されたデータを出力コンソールに出力してはならない" FirstElSrcRngStartln="14" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-494603142" lang="cpp" locEndPos="0" urgent="true" locEndLn="17" goals="1," locStartln="16" sev="1" locRef="2" tool="c++test" lineHash="-1245723280" locType="sr" hash="2102946591" causeLocRef="2">
      <Props>
        <Prop key="Tracked variables" val="汚染されたデータ" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-695983806" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="char c;" ElType="." rngLn="11" />
        <ElDesc lineHash="1807758733" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="printf(&quot;Reading file contents:\n\n&quot;);" ElType="." rngLn="12" />
        <ElDesc lineHash="66462730" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="while(1) {" ElType="." rngLn="13">
          <Anns>
            <Ann msg="ループ条件評価:1 (true)" kind="condEval" />
            <Ann msg="ループに入る" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1093133731" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="fgetc(...)" ElType=".C" rngLn="14">
          <Props>
            <Prop key="Tracked variables" val="fgetc(...)" />
          </Props>
          <Anns>
            <Ann msg="汚染ポイント" kind="cause" />
            <Ann msg="汚染されたデータ: fgetc(...)" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1093133731" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="c = fgetc(file);" ElType="!" rngLn="14" />
        <ElDesc lineHash="161967170" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="if (c!=EOF) {" ElType="." rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="c" />
          </Props>
          <Anns>
            <Ann msg="汚染されたデータ: c" kind="var" />
            <Ann msg="条件評価: (c != -1) (true を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1245723280" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="printf(&quot;%c&quot;, c);" ElType=".P" rngLn="16">
          <Props>
            <Prop key="Tracked variables" val="c" />
          </Props>
          <Anns>
            <Ann msg="汚染されたデータ: c" kind="var" />
            <Ann msg="危険なメソッド呼び出し" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="ファイルがクローズされていない: file" ln="36" locFile="/FlowAnalysis/fileLeaks.c" ruleSAFMsg="オープンされたファイルが失われたポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="27" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="ファイルがオープンされたポイント" FirstElSrcRngFile="/FlowAnalysis/fileLeaks.c" rule.header="リソースが解放されていることを確認する" FirstElSrcRngStartln="26" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1679861686" lang="cpp" locEndPos="0" urgent="true" locEndLn="37" goals="1," locStartln="36" sev="1" locRef="2" tool="c++test" lineHash="125" locType="sr" hash="2102946591" causeLocRef="2">
      <Props>
        <Prop key="Tracked variables" val="オープンされたファイル" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1954950279" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="26" ln="25" srcRngEndPos="0" srcRngStartln="25" srcRngStartPos="0" desc="FILE *file;" ElType="." rngLn="25" />
        <ElDesc lineHash="663570683" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="27" ln="26" srcRngEndPos="0" srcRngStartln="26" srcRngStartPos="0" desc="file = fopen(&quot;myfile.txt&quot;, &quot;r&quot;);" ElType=".C" rngLn="26">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="ファイルがオープンされたポイント" kind="cause" />
            <Ann msg="オープンされたファイル: file" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1958866940" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="28" ln="27" srcRngEndPos="0" srcRngStartln="27" srcRngStartPos="0" desc="if (file==NULL) {" ElType="." rngLn="27">
          <Anns>
            <Ann msg="条件評価: (file == 0) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1833015213" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="32" ln="31" srcRngEndPos="0" srcRngStartln="31" srcRngStartPos="0" desc="printf(&quot;File successfully opened.\n\n&quot;);" ElType="." rngLn="31" />
        <ElDesc lineHash="178811885" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="33" ln="32" srcRngEndPos="0" srcRngStartln="32" srcRngStartPos="0" desc="printFile(file);" ElType="." rngLn="32">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="char c;" ElType="." rngLn="11">
              <Props>
                <Prop key="Tracked variables" val="file" />
              </Props>
              <Anns>
                <Ann msg="オープンされたファイル: file" kind="var" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1807758733" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="printf(&quot;Reading file contents:\n\n&quot;);" ElType="." rngLn="12" />
            <ElDesc lineHash="66462730" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="while(1) {" ElType="." rngLn="13">
              <Anns>
                <Ann msg="ループ条件評価:1 (true)" kind="condEval" />
                <Ann msg="ループに入る" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1093133731" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="c = fgetc(file);" ElType="." rngLn="14" />
            <ElDesc lineHash="161967170" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="if (c!=EOF) {" ElType="." rngLn="15">
              <Anns>
                <Ann msg="条件評価: (c != -1) (false を仮定)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="207609628" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="19" ln="18" srcRngEndPos="0" srcRngStartln="18" srcRngStartPos="0" desc="break;" ElType="." rngLn="18">
              <Anns>
                <Ann msg="ループから出る" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1256396037" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="36" ln="35" srcRngEndPos="0" srcRngStartln="35" srcRngStartPos="0" desc="return 0;" ElType="." rngLn="35" />
        <ElDesc lineHash="125" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="37" ln="36" srcRngEndPos="0" srcRngStartln="36" srcRngStartPos="0" desc="}" ElType=".P" rngLn="36">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="オープンされたファイル: file" kind="var" />
            <Ann msg="オープンされたファイルが失われたポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="ファイルがクローズされていない: file" ln="49" locFile="/FlowAnalysis/fileLeaks.c" ruleSAFMsg="オープンされたファイルが失われたポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="50" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="1237972298" ruleSCSCMsg="ファイルがオープンされたポイント" FirstElSrcRngFile="/FlowAnalysis/fileLeaks.c" rule.header="リソースが解放されていることを確認する" FirstElSrcRngStartln="49" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="438135217" lang="cpp" locEndPos="0" urgent="true" locEndLn="50" goals="1," locStartln="49" sev="1" locRef="2" tool="c++test" lineHash="1237972298" locType="sr" hash="2102946591" causeLocRef="2">
      <Props>
        <Prop key="Tracked variables" val="オープンされたファイル" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1104249178" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="int ARRSIZE = 3;" ElType="." rngLn="40" />
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="47" ln="46" srcRngEndPos="0" srcRngStartln="46" srcRngStartPos="0" desc="int i;" ElType="." rngLn="46" />
        <ElDesc lineHash="-587502381" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="48" ln="47" srcRngEndPos="0" srcRngStartln="47" srcRngStartPos="0" desc="FILE *file = NULL;" ElType="." rngLn="47" />
        <ElDesc lineHash="1072446173" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="49" ln="48" srcRngEndPos="0" srcRngStartln="48" srcRngStartPos="0" desc="for (i = 0; i &lt; ARRSIZE; ++i) {" ElType="." rngLn="48">
          <Anns>
            <Ann msg="ループ条件評価:(i &lt; ARRSIZE) (true)" kind="condEval" />
            <Ann msg="ループに入る" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1237972298" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="50" ln="49" srcRngEndPos="0" srcRngStartln="49" srcRngStartPos="0" desc="file = fopen(names[i], &quot;r&quot;);" ElType=".C" rngLn="49">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="ファイルがオープンされたポイント" kind="cause" />
            <Ann msg="オープンされたファイル: file" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1109565686" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="51" ln="50" srcRngEndPos="0" srcRngStartln="50" srcRngStartPos="0" desc="if(file==NULL) {" ElType="." rngLn="50">
          <Anns>
            <Ann msg="条件評価: (file == 0) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="887323629" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="55" ln="54" srcRngEndPos="0" srcRngStartln="54" srcRngStartPos="0" desc="printFile(file);" ElType="." rngLn="54">
          <ElDescList>
            <ElDesc lineHash="-695983806" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="char c;" ElType="." rngLn="11">
              <Props>
                <Prop key="Tracked variables" val="file" />
              </Props>
              <Anns>
                <Ann msg="オープンされたファイル: file" kind="var" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1807758733" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="printf(&quot;Reading file contents:\n\n&quot;);" ElType="." rngLn="12" />
            <ElDesc lineHash="66462730" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="while(1) {" ElType="." rngLn="13">
              <Anns>
                <Ann msg="ループ条件評価:1 (true)" kind="condEval" />
                <Ann msg="ループに入る" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1093133731" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="c = fgetc(file);" ElType="." rngLn="14" />
            <ElDesc lineHash="161967170" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="if (c!=EOF) {" ElType="." rngLn="15">
              <Anns>
                <Ann msg="条件評価: (c != -1) (false を仮定)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="207609628" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="19" ln="18" srcRngEndPos="0" srcRngStartln="18" srcRngStartPos="0" desc="break;" ElType="." rngLn="18">
              <Anns>
                <Ann msg="ループから出る" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="1072446173" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="49" ln="48" srcRngEndPos="0" srcRngStartln="48" srcRngStartPos="0" desc="for (i = 0; i &lt; ARRSIZE; ++i) {" ElType="." rngLn="48">
          <Anns>
            <Ann msg="ループ条件評価: (i &lt; ARRSIZE) (true を仮定)" kind="condEval" />
            <Ann msg="ループに入る" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1237972298" locType="sr" srcRnghash="2102946591" locRef="2" srcRngFile="/FlowAnalysis/fileLeaks.c" srcRngEndLn="50" ln="49" srcRngEndPos="0" srcRngStartln="49" srcRngStartPos="0" desc="file = fopen(names[i], &quot;r&quot;);" ElType=".P" rngLn="49">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="オープンされたファイル: file" kind="var" />
            <Ann msg="オープンされたファイルが失われたポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="メモリが解放されていない: p" ln="26" locFile="/FlowAnalysis/memoryLeaks.c" ruleSAFMsg="割り当てられたメモリが失われたポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="19" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="2099466359" ruleSCSCMsg="メモリが割り当てられたポイント" FirstElSrcRngFile="/FlowAnalysis/memoryLeaks.c" rule.header="リソースが解放されていることを確認する" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="324425043" lang="cpp" locEndPos="0" urgent="true" locEndLn="27" goals="1," locStartln="26" sev="1" locRef="3" tool="c++test" lineHash="2099466359" locType="sr" hash="1502549011" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="割り当てられたメモリ" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-100714984" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="char *c;" ElType="." rngLn="12" />
        <ElDesc lineHash="39827869" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="char buf[100];" ElType="." rngLn="13" />
        <ElDesc lineHash="-785260158" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="int id = 0;" ElType="." rngLn="14" />
        <ElDesc lineHash="66462730" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="while(1) {" ElType="." rngLn="15">
          <Anns>
            <Ann msg="ループ条件評価:1 (true)" kind="condEval" />
            <Ann msg="ループに入る" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-526658767" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="c = fgets(buf, 100, file);" ElType="." rngLn="16" />
        <ElDesc lineHash="301978179" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="if (c!=NULL) {" ElType="." rngLn="17">
          <Anns>
            <Ann msg="条件評価: (c != 0) (true を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1212191400" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="19" ln="18" srcRngEndPos="0" srcRngStartln="18" srcRngStartPos="0" desc="malloc(...)" ElType=".C" rngLn="18">
          <Props>
            <Prop key="Tracked variables" val="malloc(...)" />
          </Props>
          <Anns>
            <Ann msg="メモリが割り当てられたポイント" kind="cause" />
            <Ann msg="割り当てられたメモリ: malloc(...)" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1212191400" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="19" ln="18" srcRngEndPos="0" srcRngStartln="18" srcRngStartPos="0" desc="Person* p = malloc(sizeof(Person));" ElType="!" rngLn="18" />
        <ElDesc lineHash="-812912267" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="20" ln="19" srcRngEndPos="0" srcRngStartln="19" srcRngStartPos="0" desc="if (p == 0) exit(1);" ElType="." rngLn="19">
          <Props>
            <Prop key="Tracked variables" val="p" />
          </Props>
          <Anns>
            <Ann msg="割り当てられたメモリ: p" kind="var" />
            <Ann msg="条件評価: (p == 0) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1899725753" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="21" ln="20" srcRngEndPos="0" srcRngStartln="20" srcRngStartPos="0" desc="p->personalId = ++id;" ElType="." rngLn="20" />
        <ElDesc lineHash="-217028449" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="22" ln="21" srcRngEndPos="0" srcRngStartln="21" srcRngStartPos="0" desc="p->name = buf;" ElType="." rngLn="21" />
        <ElDesc lineHash="-2076993264" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="23" ln="22" srcRngEndPos="0" srcRngStartln="22" srcRngStartPos="0" desc="storePerson(p);" ElType="." rngLn="22" />
        <ElDesc lineHash="2099466359" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="27" ln="26" srcRngEndPos="0" srcRngStartln="26" srcRngStartPos="0" desc="} else {" ElType=".P" rngLn="26">
          <Props>
            <Prop key="Tracked variables" val="p" />
          </Props>
          <Anns>
            <Ann msg="割り当てられたメモリ: p" kind="var" />
            <Ann msg="割り当てられたメモリが失われたポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="メモリが解放されていない: pointer" ln="40" locFile="/FlowAnalysis/memoryLeaks.c" ruleSAFMsg="割り当てられたメモリが失われたポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="41" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="-334359523" ruleSCSCMsg="メモリが割り当てられたポイント" FirstElSrcRngFile="/FlowAnalysis/memoryLeaks.c" rule.header="リソースが解放されていることを確認する" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="112578646" lang="cpp" locEndPos="0" urgent="true" locEndLn="41" goals="1," locStartln="40" sev="1" locRef="3" tool="c++test" lineHash="-334359523" locType="sr" hash="1502549011" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="割り当てられたメモリ" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="221640208" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="35" ln="34" srcRngEndPos="0" srcRngStartln="34" srcRngStartPos="0" desc="int count = 0;" ElType="." rngLn="34" />
        <ElDesc lineHash="1125267983" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="36" ln="35" srcRngEndPos="0" srcRngStartln="35" srcRngStartPos="0" desc="int LOOPS = 100;" ElType="." rngLn="35" />
        <ElDesc lineHash="22113273" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="37" ln="36" srcRngEndPos="0" srcRngStartln="36" srcRngStartPos="0" desc="int MAXSIZE = 100;" ElType="." rngLn="36" />
        <ElDesc lineHash="-1239722706" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="38" ln="37" srcRngEndPos="0" srcRngStartln="37" srcRngStartPos="0" desc="char *pointer = NULL;" ElType="." rngLn="37" />
        <ElDesc lineHash="-1318212244" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="40" ln="39" srcRngEndPos="0" srcRngStartln="39" srcRngStartPos="0" desc="for(count=0; count &lt; LOOPS; count++) {" ElType="." rngLn="39">
          <Anns>
            <Ann msg="ループ条件評価:(count &lt; LOOPS) (true)" kind="condEval" />
            <Ann msg="ループに入る" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-334359523" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="malloc(...)" ElType=".C" rngLn="40">
          <Props>
            <Prop key="Tracked variables" val="malloc(...)" />
          </Props>
          <Anns>
            <Ann msg="メモリが割り当てられたポイント" kind="cause" />
            <Ann msg="割り当てられたメモリ: malloc(...)" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-334359523" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="pointer = (char *)malloc(sizeof(char) * MAXSIZE);" ElType="!" rngLn="40" />
        <ElDesc lineHash="-1318212244" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="40" ln="39" srcRngEndPos="0" srcRngStartln="39" srcRngStartPos="0" desc="for(count=0; count &lt; LOOPS; count++) {" ElType="." rngLn="39">
          <Props>
            <Prop key="Tracked variables" val="pointer" />
          </Props>
          <Anns>
            <Ann msg="割り当てられたメモリ: pointer" kind="var" />
            <Ann msg="ループ条件評価: (count &lt; LOOPS) (true を仮定)" kind="condEval" />
            <Ann msg="ループに入る" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-334359523" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="pointer = (char *)malloc(sizeof(char) * MAXSIZE);" ElType=".P" rngLn="40">
          <Props>
            <Prop key="Tracked variables" val="pointer" />
          </Props>
          <Anns>
            <Ann msg="割り当てられたメモリ: pointer" kind="var" />
            <Ann msg="割り当てられたメモリが失われたポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="メソッド malloc から返される値をチェックするべきである" ln="44" locFile="/FlowAnalysis/memoryLeaks.c" ruleSAFMsg="返された値をここまでにチェックするべきポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="41" rule="BD-PB-CHECKRETGEN" FirstElSrcRngStartPos="0" lnHash="-1712628621" ruleSCSCMsg="メソッド呼び出し" FirstElSrcRngFile="/FlowAnalysis/memoryLeaks.c" rule.header="常に非 void 関数の戻り値をチェックする" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="133945557" lang="cpp" locEndPos="0" urgent="true" locEndLn="45" goals="1," locStartln="44" sev="2" locRef="3" tool="c++test" lineHash="-1712628621" locType="sr" hash="1502549011" causeLocRef="3">
      <Props />
      <ElDescList>
        <ElDesc lineHash="221640208" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="35" ln="34" srcRngEndPos="0" srcRngStartln="34" srcRngStartPos="0" desc="int count = 0;" ElType="." rngLn="34" />
        <ElDesc lineHash="1125267983" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="36" ln="35" srcRngEndPos="0" srcRngStartln="35" srcRngStartPos="0" desc="int LOOPS = 100;" ElType="." rngLn="35" />
        <ElDesc lineHash="22113273" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="37" ln="36" srcRngEndPos="0" srcRngStartln="36" srcRngStartPos="0" desc="int MAXSIZE = 100;" ElType="." rngLn="36" />
        <ElDesc lineHash="-1239722706" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="38" ln="37" srcRngEndPos="0" srcRngStartln="37" srcRngStartPos="0" desc="char *pointer = NULL;" ElType="." rngLn="37" />
        <ElDesc lineHash="-1318212244" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="40" ln="39" srcRngEndPos="0" srcRngStartln="39" srcRngStartPos="0" desc="for(count=0; count &lt; LOOPS; count++) {" ElType="." rngLn="39">
          <Anns>
            <Ann msg="ループ条件評価:(count &lt; LOOPS) (true)" kind="condEval" />
            <Ann msg="ループに入る" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-334359523" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="malloc(...)" ElType=".C" rngLn="40">
          <Anns>
            <Ann msg="メソッド呼び出し" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-334359523" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="pointer = (char *)malloc(sizeof(char) * MAXSIZE);" ElType="." rngLn="40" />
        <ElDesc lineHash="-1318212244" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="40" ln="39" srcRngEndPos="0" srcRngStartln="39" srcRngStartPos="0" desc="for(count=0; count &lt; LOOPS; count++) {" ElType="." rngLn="39">
          <Anns>
            <Ann msg="ループ条件評価: (count &lt; LOOPS) (false を仮定)" kind="condEval" />
            <Ann msg="ループに入っていない" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1712628621" locType="sr" srcRnghash="1502549011" locRef="3" srcRngFile="/FlowAnalysis/memoryLeaks.c" srcRngEndLn="45" ln="44" srcRngEndPos="0" srcRngStartln="44" srcRngStartPos="0" desc="free(pointer);" ElType=".P" rngLn="44">
          <Anns>
            <Ann msg="返された値をここまでにチェックするべきポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="ゼロである可能性がある &quot;person->daysWorkedInPassedMonth&quot; による除算" ln="9" locFile="/FlowAnalysis/divisionByZero.c" ruleSAFMsg="ゼロ割のポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="19" rule="BD-PB-ZERO" FirstElSrcRngStartPos="0" lnHash="-969021421" ruleSCSCMsg="パスの開始" FirstElSrcRngFile="/FlowAnalysis/divisionByZero.c" rule.header="ゼロによる除算を避ける" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-523346250" lang="cpp" locEndPos="0" urgent="true" locEndLn="10" goals="1," locStartln="9" sev="1" locRef="4" tool="c++test" lineHash="-969021421" locType="sr" hash="1923244810" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1706567659" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="19" ln="18" srcRngEndPos="0" srcRngStartln="18" srcRngStartPos="0" desc="p->daysWorkedInPassedMonth = 0;" ElType=".C" rngLn="18">
          <Anns>
            <Ann msg="パスの開始" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="417141098" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="20" ln="19" srcRngEndPos="0" srcRngStartln="19" srcRngStartPos="0" desc="displayPersonalInfo(p);" ElType="!" rngLn="19">
          <ElDescList>
            <ElDesc lineHash="-194506379" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="8" ln="7" srcRngEndPos="0" srcRngStartln="7" srcRngStartPos="0" desc="printf(&quot;Name: %s\n&quot;, person->name);" ElType="." rngLn="7" />
            <ElDesc lineHash="-1754501628" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="9" ln="8" srcRngEndPos="0" srcRngStartln="8" srcRngStartPos="0" desc="printf(&quot;Salary: %d\n&quot;, person->salary);" ElType="." rngLn="8" />
            <ElDesc lineHash="-969021421" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="10" ln="9" srcRngEndPos="0" srcRngStartln="9" srcRngStartPos="0" desc="printf(&quot;Day's pay: %d\n&quot;, person->salary/person->daysWorkedInPassedMonth);" ElType=".P" rngLn="9">
              <Anns>
                <Ann msg="ゼロ割のポイント" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="ゼロである可能性がある &quot;numberOfEmployees&quot; による除算" ln="26" locFile="/FlowAnalysis/divisionByZero.c" ruleSAFMsg="ゼロ割のポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="54" rule="BD-PB-ZERO" FirstElSrcRngStartPos="0" lnHash="-1503128871" ruleSCSCMsg="パスの開始" FirstElSrcRngFile="/FlowAnalysis/divisionByZero.c" rule.header="ゼロによる除算を避ける" FirstElSrcRngStartln="53" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-708653029" lang="cpp" locEndPos="0" urgent="true" locEndLn="27" goals="1," locStartln="26" sev="1" locRef="4" tool="c++test" lineHash="-1503128871" locType="sr" hash="1923244810" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="2068113868" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="54" ln="53" srcRngEndPos="0" srcRngStartln="53" srcRngStartPos="0" desc="numberOfEmployees = processFile(file, employees);" ElType=".C" rngLn="53">
          <ElDescList>
            <ElDesc lineHash="-1256396037" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="return 0;" ElType="!" rngLn="41">
              <Anns>
                <Ann msg="戻り値: 0" kind="valEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="パスの開始" kind="cause" />
            <Ann msg="変数の代入: numberOfEmployees = processFile(file,employees) -> numberOfEmployees = 0" kind="valEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-337476011" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="55" ln="54" srcRngEndPos="0" srcRngStartln="54" srcRngStartPos="0" desc="processStaff(employees, numberOfEmployees);" ElType="!" rngLn="54">
          <ElDescList>
            <ElDesc lineHash="727882071" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="30" ln="29" srcRngEndPos="0" srcRngStartln="29" srcRngStartPos="0" desc="void processStaff(Person* employees[], int sizeOfStaff)" ElType="!" rngLn="29">
              <Anns>
                <Ann msg="パラメーター値: sizeOfStaff = numberOfEmployees -> sizeOfStaff = 0" kind="valEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="32" ln="31" srcRngEndPos="0" srcRngStartln="31" srcRngStartPos="0" desc="int i;" ElType="." rngLn="31" />
            <ElDesc lineHash="882805155" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="33" ln="32" srcRngEndPos="0" srcRngStartln="32" srcRngStartPos="0" desc="for (i = 0; i &lt; sizeOfStaff; ++i) {" ElType="." rngLn="32">
              <Anns>
                <Ann msg="ループ条件評価:(i &lt; sizeOfStaff) (false)" kind="condEval" />
                <Ann msg="ループに入っていない" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="-1642911173" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="36" ln="35" srcRngEndPos="0" srcRngStartln="35" srcRngStartPos="0" desc="calculateAverageSalary(...)" ElType="!" rngLn="35">
              <ElDescList>
                <ElDesc lineHash="1420344907" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="24" ln="23" srcRngEndPos="0" srcRngStartln="23" srcRngStartPos="0" desc="int calculateAverageSalary(int numberOfEmployees)" ElType="!" rngLn="23">
                  <Anns>
                    <Ann msg="パラメーター値: numberOfEmployees = sizeOfStaff -> numberOfEmployees = 0" kind="valEval" />
                  </Anns>
                </ElDesc>
                <ElDesc lineHash="-306300958" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="26" ln="25" srcRngEndPos="0" srcRngStartln="25" srcRngStartPos="0" desc="int WAGE_FUND = 10000;" ElType="." rngLn="25" />
                <ElDesc lineHash="-1503128871" locType="sr" srcRnghash="1923244810" locRef="4" srcRngFile="/FlowAnalysis/divisionByZero.c" srcRngEndLn="27" ln="26" srcRngEndPos="0" srcRngStartln="26" srcRngStartPos="0" desc="return WAGE_FUND/numberOfEmployees;" ElType=".P" rngLn="26">
                  <Anns>
                    <Ann msg="ゼロ割のポイント" kind="point" />
                  </Anns>
                </ElDesc>
              </ElDescList>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;numberOfCharactersPrinted&quot; は初期化する前に使用されている" ln="27" locFile="/FlowAnalysis/useBeforeInit.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="19" rule="BD-PB-NOTINIT" FirstElSrcRngStartPos="0" lnHash="-1547729396" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/FlowAnalysis/useBeforeInit.c" rule.header="初期化の前に使用しない" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1810206114" lang="cpp" locEndPos="0" urgent="true" locEndLn="28" goals="1," locStartln="27" sev="1" locRef="5" tool="c++test" lineHash="-1547729396" locType="sr" hash="389143777" causeLocRef="5">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1954950279" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="FILE *file;" ElType="." rngLn="17" />
        <ElDesc lineHash="943815722" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="19" ln="18" srcRngEndPos="0" srcRngStartln="18" srcRngStartPos="0" desc="int numberOfCharactersPrinted;" ElType=".C" rngLn="18">
          <Props>
            <Prop key="Tracked variables" val="numberOfCharactersPrinted" />
          </Props>
          <Anns>
            <Ann msg="初期化されていない値のソース" kind="cause" />
            <Ann msg="初期化されていない値: numberOfCharactersPrinted" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="986280837" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="20" ln="19" srcRngEndPos="0" srcRngStartln="19" srcRngStartPos="0" desc="file = fopen(filename, &quot;w&quot;);" ElType="." rngLn="19" />
        <ElDesc lineHash="1027984352" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="22" ln="21" srcRngEndPos="0" srcRngStartln="21" srcRngStartPos="0" desc="if (file!=NULL) {" ElType="." rngLn="21">
          <Anns>
            <Ann msg="条件評価: (file != 0) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1547729396" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="28" ln="27" srcRngEndPos="0" srcRngStartln="27" srcRngStartPos="0" desc="printf(&quot;File length: %d\n&quot;, numberOfCharactersPrinted);" ElType=".P" rngLn="27">
          <Props>
            <Prop key="Tracked variables" val="numberOfCharactersPrinted" />
          </Props>
          <Anns>
            <Ann msg="初期化されていない値: numberOfCharactersPrinted" kind="var" />
            <Ann msg="使用ポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="ファイルがクローズされていない: file" ln="40" locFile="/FlowAnalysis/useBeforeInit.c" ruleSAFMsg="オープンされたファイルが失われたポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="35" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="-321328779" ruleSCSCMsg="ファイルがオープンされたポイント" FirstElSrcRngFile="/FlowAnalysis/useBeforeInit.c" rule.header="リソースが解放されていることを確認する" FirstElSrcRngStartln="34" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="12287502" lang="cpp" locEndPos="0" urgent="true" locEndLn="41" goals="1," locStartln="40" sev="1" locRef="5" tool="c++test" lineHash="-321328779" locType="sr" hash="389143777" causeLocRef="5">
      <Props>
        <Prop key="Tracked variables" val="オープンされたファイル" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1041656438" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="33" ln="32" srcRngEndPos="0" srcRngStartln="32" srcRngStartPos="0" desc="Person* p;" ElType="." rngLn="32" />
        <ElDesc lineHash="-1954950279" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="34" ln="33" srcRngEndPos="0" srcRngStartln="33" srcRngStartPos="0" desc="FILE *file;" ElType="." rngLn="33" />
        <ElDesc lineHash="986131882" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="35" ln="34" srcRngEndPos="0" srcRngStartln="34" srcRngStartPos="0" desc="file = fopen(filename, &quot;r&quot;);" ElType=".C" rngLn="34">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="ファイルがオープンされたポイント" kind="cause" />
            <Ann msg="オープンされたファイル: file" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1027984352" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="36" ln="35" srcRngEndPos="0" srcRngStartln="35" srcRngStartPos="0" desc="if (file!=NULL) {" ElType="." rngLn="35">
          <Anns>
            <Ann msg="条件評価: (file != 0) (true を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="905762227" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="37" ln="36" srcRngEndPos="0" srcRngStartln="36" srcRngStartPos="0" desc="char id[10];" ElType="." rngLn="36" />
        <ElDesc lineHash="-170681591" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="38" ln="37" srcRngEndPos="0" srcRngStartln="37" srcRngStartPos="0" desc="char name[100];" ElType="." rngLn="37" />
        <ElDesc lineHash="-483460585" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char reference[1000];" ElType="." rngLn="38" />
        <ElDesc lineHash="1433650083" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="40" ln="39" srcRngEndPos="0" srcRngStartln="39" srcRngStartPos="0" desc="p = malloc(sizeof(Person));" ElType="." rngLn="39" />
        <ElDesc lineHash="-321328779" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="exit(...)" ElType=".P" rngLn="40">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="オープンされたファイル: file" kind="var" />
            <Ann msg="オープンされたファイルが失われたポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="メソッド fgets から返される値をチェックするべきである" ln="41" locFile="/FlowAnalysis/useBeforeInit.c" ruleSAFMsg="返された値をここまでにチェックするべきポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="42" rule="BD-PB-CHECKRETGEN" FirstElSrcRngStartPos="0" lnHash="733807829" ruleSCSCMsg="メソッド呼び出し" FirstElSrcRngFile="/FlowAnalysis/useBeforeInit.c" rule.header="常に非 void 関数の戻り値をチェックする" FirstElSrcRngStartln="41" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="344529604" lang="cpp" locEndPos="0" urgent="true" locEndLn="42" goals="1," locStartln="41" sev="2" locRef="5" tool="c++test" lineHash="733807829" locType="sr" hash="389143777" causeLocRef="5">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1041656438" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="33" ln="32" srcRngEndPos="0" srcRngStartln="32" srcRngStartPos="0" desc="Person* p;" ElType="." rngLn="32" />
        <ElDesc lineHash="-1954950279" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="34" ln="33" srcRngEndPos="0" srcRngStartln="33" srcRngStartPos="0" desc="FILE *file;" ElType="." rngLn="33" />
        <ElDesc lineHash="986131882" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="35" ln="34" srcRngEndPos="0" srcRngStartln="34" srcRngStartPos="0" desc="file = fopen(filename, &quot;r&quot;);" ElType="." rngLn="34" />
        <ElDesc lineHash="1027984352" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="36" ln="35" srcRngEndPos="0" srcRngStartln="35" srcRngStartPos="0" desc="if (file!=NULL) {" ElType="." rngLn="35">
          <Anns>
            <Ann msg="条件評価: (file != 0) (true を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="905762227" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="37" ln="36" srcRngEndPos="0" srcRngStartln="36" srcRngStartPos="0" desc="char id[10];" ElType="." rngLn="36" />
        <ElDesc lineHash="-170681591" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="38" ln="37" srcRngEndPos="0" srcRngStartln="37" srcRngStartPos="0" desc="char name[100];" ElType="." rngLn="37" />
        <ElDesc lineHash="-483460585" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char reference[1000];" ElType="." rngLn="38" />
        <ElDesc lineHash="1433650083" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="40" ln="39" srcRngEndPos="0" srcRngStartln="39" srcRngStartPos="0" desc="p = malloc(sizeof(Person));" ElType="." rngLn="39" />
        <ElDesc lineHash="-321328779" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="if (p == 0) exit(1);" ElType="." rngLn="40">
          <Anns>
            <Ann msg="条件評価: (p == 0) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="733807829" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="fgets(id, 10, file);" ElType="CP" rngLn="41">
          <Anns>
            <Ann msg="メソッド呼び出し" kind="cause" />
            <Ann msg="返された値をここまでにチェックするべきポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;fgets&quot; メソッドの文字列 &quot;id&quot; が使用されているが、リセットされていなかった" ln="42" locFile="/FlowAnalysis/useBeforeInit.c" ruleSAFMsg="文字列が使用される場所" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="42" rule="BD-PB-FGETS" FirstElSrcRngStartPos="0" lnHash="1253528737" ruleSCSCMsg="文字列が取得されるポイント" FirstElSrcRngFile="/FlowAnalysis/useBeforeInit.c" rule.header="fgets() または fgetws() が失敗した場合、文字列をリセットする" FirstElSrcRngStartln="41" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1384858125" lang="cpp" locEndPos="0" urgent="true" locEndLn="43" goals="1," locStartln="42" sev="2" locRef="5" tool="c++test" lineHash="1253528737" locType="sr" hash="389143777" causeLocRef="5">
      <Props />
      <ElDescList>
        <ElDesc lineHash="733807829" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="fgets(id, 10, file);" ElType=".C" rngLn="41">
          <Anns>
            <Ann msg="文字列が取得されるポイント" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1253528737" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="p->personalId = atoi(id);" ElType=".P" rngLn="42">
          <Anns>
            <Ann msg="文字列が使用される場所" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="メソッド fgets から返される値をチェックするべきである" ln="43" locFile="/FlowAnalysis/useBeforeInit.c" ruleSAFMsg="返された値をここまでにチェックするべきポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="44" rule="BD-PB-CHECKRETGEN" FirstElSrcRngStartPos="0" lnHash="-726318129" ruleSCSCMsg="メソッド呼び出し" FirstElSrcRngFile="/FlowAnalysis/useBeforeInit.c" rule.header="常に非 void 関数の戻り値をチェックする" FirstElSrcRngStartln="43" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1181727388" lang="cpp" locEndPos="0" urgent="true" locEndLn="44" goals="1," locStartln="43" sev="2" locRef="5" tool="c++test" lineHash="-726318129" locType="sr" hash="389143777" causeLocRef="5">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1041656438" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="33" ln="32" srcRngEndPos="0" srcRngStartln="32" srcRngStartPos="0" desc="Person* p;" ElType="." rngLn="32" />
        <ElDesc lineHash="-1954950279" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="34" ln="33" srcRngEndPos="0" srcRngStartln="33" srcRngStartPos="0" desc="FILE *file;" ElType="." rngLn="33" />
        <ElDesc lineHash="986131882" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="35" ln="34" srcRngEndPos="0" srcRngStartln="34" srcRngStartPos="0" desc="file = fopen(filename, &quot;r&quot;);" ElType="." rngLn="34" />
        <ElDesc lineHash="1027984352" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="36" ln="35" srcRngEndPos="0" srcRngStartln="35" srcRngStartPos="0" desc="if (file!=NULL) {" ElType="." rngLn="35">
          <Anns>
            <Ann msg="条件評価: (file != 0) (true を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="905762227" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="37" ln="36" srcRngEndPos="0" srcRngStartln="36" srcRngStartPos="0" desc="char id[10];" ElType="." rngLn="36" />
        <ElDesc lineHash="-170681591" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="38" ln="37" srcRngEndPos="0" srcRngStartln="37" srcRngStartPos="0" desc="char name[100];" ElType="." rngLn="37" />
        <ElDesc lineHash="-483460585" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char reference[1000];" ElType="." rngLn="38" />
        <ElDesc lineHash="1433650083" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="40" ln="39" srcRngEndPos="0" srcRngStartln="39" srcRngStartPos="0" desc="p = malloc(sizeof(Person));" ElType="." rngLn="39" />
        <ElDesc lineHash="-321328779" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="if (p == 0) exit(1);" ElType="." rngLn="40">
          <Anns>
            <Ann msg="条件評価: (p == 0) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="733807829" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="fgets(id, 10, file);" ElType="." rngLn="41" />
        <ElDesc lineHash="1253528737" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="p->personalId = atoi(id);" ElType="." rngLn="42" />
        <ElDesc lineHash="-726318129" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="fgets(name, 100, file);" ElType="CP" rngLn="43">
          <Anns>
            <Ann msg="メソッド呼び出し" kind="cause" />
            <Ann msg="返された値をここまでにチェックするべきポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="メソッド fgets から返される値をチェックするべきである" ln="45" locFile="/FlowAnalysis/useBeforeInit.c" ruleSAFMsg="返された値をここまでにチェックするべきポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="46" rule="BD-PB-CHECKRETGEN" FirstElSrcRngStartPos="0" lnHash="-1026068167" ruleSCSCMsg="メソッド呼び出し" FirstElSrcRngFile="/FlowAnalysis/useBeforeInit.c" rule.header="常に非 void 関数の戻り値をチェックする" FirstElSrcRngStartln="45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-25154312" lang="cpp" locEndPos="0" urgent="true" locEndLn="46" goals="1," locStartln="45" sev="2" locRef="5" tool="c++test" lineHash="-1026068167" locType="sr" hash="389143777" causeLocRef="5">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1041656438" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="33" ln="32" srcRngEndPos="0" srcRngStartln="32" srcRngStartPos="0" desc="Person* p;" ElType="." rngLn="32" />
        <ElDesc lineHash="-1954950279" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="34" ln="33" srcRngEndPos="0" srcRngStartln="33" srcRngStartPos="0" desc="FILE *file;" ElType="." rngLn="33" />
        <ElDesc lineHash="986131882" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="35" ln="34" srcRngEndPos="0" srcRngStartln="34" srcRngStartPos="0" desc="file = fopen(filename, &quot;r&quot;);" ElType="." rngLn="34" />
        <ElDesc lineHash="1027984352" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="36" ln="35" srcRngEndPos="0" srcRngStartln="35" srcRngStartPos="0" desc="if (file!=NULL) {" ElType="." rngLn="35">
          <Anns>
            <Ann msg="条件評価: (file != 0) (true を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="905762227" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="37" ln="36" srcRngEndPos="0" srcRngStartln="36" srcRngStartPos="0" desc="char id[10];" ElType="." rngLn="36" />
        <ElDesc lineHash="-170681591" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="38" ln="37" srcRngEndPos="0" srcRngStartln="37" srcRngStartPos="0" desc="char name[100];" ElType="." rngLn="37" />
        <ElDesc lineHash="-483460585" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char reference[1000];" ElType="." rngLn="38" />
        <ElDesc lineHash="1433650083" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="40" ln="39" srcRngEndPos="0" srcRngStartln="39" srcRngStartPos="0" desc="p = malloc(sizeof(Person));" ElType="." rngLn="39" />
        <ElDesc lineHash="-321328779" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="if (p == 0) exit(1);" ElType="." rngLn="40">
          <Anns>
            <Ann msg="条件評価: (p == 0) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="733807829" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="42" ln="41" srcRngEndPos="0" srcRngStartln="41" srcRngStartPos="0" desc="fgets(id, 10, file);" ElType="." rngLn="41" />
        <ElDesc lineHash="1253528737" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="p->personalId = atoi(id);" ElType="." rngLn="42" />
        <ElDesc lineHash="-726318129" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="44" ln="43" srcRngEndPos="0" srcRngStartln="43" srcRngStartPos="0" desc="fgets(name, 100, file);" ElType="." rngLn="43" />
        <ElDesc lineHash="68474233" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="45" ln="44" srcRngEndPos="0" srcRngStartln="44" srcRngStartPos="0" desc="p->name = name;" ElType="." rngLn="44" />
        <ElDesc lineHash="-1026068167" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="46" ln="45" srcRngEndPos="0" srcRngStartln="45" srcRngStartPos="0" desc="fgets(reference, 100, file);" ElType="CP" rngLn="45">
          <Anns>
            <Ann msg="メソッド呼び出し" kind="cause" />
            <Ann msg="返された値をここまでにチェックするべきポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;p&quot; は初期化する前に使用されている" ln="51" locFile="/FlowAnalysis/useBeforeInit.c" ruleSAFMsg="使用ポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="33" rule="BD-PB-NOTINIT" FirstElSrcRngStartPos="0" lnHash="1220665574" ruleSCSCMsg="初期化されていない値のソース" FirstElSrcRngFile="/FlowAnalysis/useBeforeInit.c" rule.header="初期化の前に使用しない" FirstElSrcRngStartln="32" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2041234283" lang="cpp" locEndPos="0" urgent="true" locEndLn="52" goals="1," locStartln="51" sev="1" locRef="5" tool="c++test" lineHash="1220665574" locType="sr" hash="389143777" causeLocRef="5">
      <Props>
        <Prop key="Tracked variables" val="初期化されていない値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1041656438" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="33" ln="32" srcRngEndPos="0" srcRngStartln="32" srcRngStartPos="0" desc="Person* p;" ElType=".C" rngLn="32">
          <Props>
            <Prop key="Tracked variables" val="p" />
          </Props>
          <Anns>
            <Ann msg="初期化されていない値のソース" kind="cause" />
            <Ann msg="初期化されていない値: p" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1954950279" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="34" ln="33" srcRngEndPos="0" srcRngStartln="33" srcRngStartPos="0" desc="FILE *file;" ElType="." rngLn="33" />
        <ElDesc lineHash="986131882" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="35" ln="34" srcRngEndPos="0" srcRngStartln="34" srcRngStartPos="0" desc="file = fopen(filename, &quot;r&quot;);" ElType="." rngLn="34" />
        <ElDesc lineHash="1027984352" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="36" ln="35" srcRngEndPos="0" srcRngStartln="35" srcRngStartPos="0" desc="if (file!=NULL) {" ElType="." rngLn="35">
          <Anns>
            <Ann msg="条件評価: (file != 0) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="295924201" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="51" ln="50" srcRngEndPos="0" srcRngStartln="50" srcRngStartPos="0" desc="storePersonToDB(p);" ElType="." rngLn="50" />
        <ElDesc lineHash="1220665574" locType="sr" srcRnghash="389143777" locRef="5" srcRngFile="/FlowAnalysis/useBeforeInit.c" srcRngEndLn="52" ln="51" srcRngEndPos="0" srcRngStartln="51" srcRngStartPos="0" desc="free(p);" ElType=".P" rngLn="51">
          <Props>
            <Prop key="Tracked variables" val="p" />
          </Props>
          <Anns>
            <Ann msg="初期化されていない値: p" kind="var" />
            <Ann msg="使用ポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;person&quot; は null の可能性がある" ln="13" locFile="/FlowAnalysis/nullPointerDeref.c" ruleSAFMsg="null ポインタ間接参照のポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="11" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="650531314" ruleSCSCMsg="NULL 値のソース" FirstElSrcRngFile="/FlowAnalysis/dbutil.c" rule.header="null ポインターの間接参照を避ける" FirstElSrcRngStartln="10" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1452351157" lang="cpp" locEndPos="0" urgent="true" locEndLn="14" goals="1," locStartln="13" sev="1" locRef="6" tool="c++test" lineHash="650531314" locType="sr" hash="585379582" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="NULL 値のキャリア" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1374140990" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="23" ln="22" srcRngEndPos="0" srcRngStartln="22" srcRngStartPos="0" desc="Person* p = retrievePersonFromDB(id);" ElType="!" rngLn="22">
          <ElDescList>
            <ElDesc lineHash="1041656438" locType="sr" srcRnghash="-892903586" locRef="1" srcRngFile="/FlowAnalysis/dbutil.c" srcRngEndLn="8" ln="7" srcRngEndPos="0" srcRngStartln="7" srcRngStartPos="0" desc="Person* p;" ElType="." rngLn="7" />
            <ElDesc lineHash="932373780" locType="sr" srcRnghash="-892903586" locRef="1" srcRngFile="/FlowAnalysis/dbutil.c" srcRngEndLn="9" ln="8" srcRngEndPos="0" srcRngStartln="8" srcRngStartPos="0" desc="int MIN_ID = 1;" ElType="." rngLn="8" />
            <ElDesc lineHash="1035623864" locType="sr" srcRnghash="-892903586" locRef="1" srcRngFile="/FlowAnalysis/dbutil.c" srcRngEndLn="10" ln="9" srcRngEndPos="0" srcRngStartln="9" srcRngStartPos="0" desc="if (id &lt; MIN_ID) {" ElType="." rngLn="9">
              <Anns>
                <Ann msg="条件評価: (id &lt; MIN_ID) (true を仮定)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="-1561874268" locType="sr" srcRnghash="-892903586" locRef="1" srcRngFile="/FlowAnalysis/dbutil.c" srcRngEndLn="11" ln="10" srcRngEndPos="0" srcRngStartln="10" srcRngStartPos="0" desc="return NULL;" ElType=".C" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="&lt;retrievePersonFromDB() の戻り値>" />
              </Props>
              <Anns>
                <Ann msg="NULL 値のソース" kind="cause" />
                <Ann msg="NULL 値のキャリア: &lt;retrievePersonFromDB() の戻り値>" kind="var" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1906410249" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="24" ln="23" srcRngEndPos="0" srcRngStartln="23" srcRngStartPos="0" desc="storePersonToFile(p, file);" ElType="!" rngLn="23">
          <ElDescList>
            <ElDesc lineHash="1027984352" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="if (file!=NULL) {" ElType="." rngLn="12">
              <Props>
                <Prop key="Tracked variables" val="person" />
              </Props>
              <Anns>
                <Ann msg="NULL 値のキャリア: person" kind="var" />
                <Ann msg="条件評価: (file != 0) (true を仮定)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="650531314" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="fprintf(file, &quot;Id: %d Name: %s References:%s\n&quot;," ElType=".P" rngLn="13">
              <Props>
                <Prop key="Tracked variables" val="person" />
              </Props>
              <Anns>
                <Ann msg="NULL 値のキャリア: person" kind="var" />
                <Ann msg="null ポインタ間接参照のポイント" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="p" />
          </Props>
          <Anns>
            <Ann msg="NULL 値のキャリア: p" kind="var" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;file&quot; は null の可能性がある" ln="17" locFile="/FlowAnalysis/nullPointerDeref.c" ruleSAFMsg="null ポインタ間接参照のポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="13" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="191846468" ruleSCSCMsg="NULL 値のソース" FirstElSrcRngFile="/FlowAnalysis/nullPointerDeref.c" rule.header="null ポインターの間接参照を避ける" FirstElSrcRngStartln="12" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-336304907" lang="cpp" locEndPos="0" urgent="true" locEndLn="18" goals="1," locStartln="17" sev="1" locRef="6" tool="c++test" lineHash="191846468" locType="sr" hash="585379582" causeLocRef="6">
      <Props>
        <Prop key="Tracked variables" val="NULL 値のキャリア" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1027984352" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="if (file!=NULL) {" ElType=".C" rngLn="12">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="NULL 値のソース" kind="cause" />
            <Ann msg="NULL 値のキャリア: file" kind="var" />
            <Ann msg="条件評価: (file != 0) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="191846468" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="fclose(file);" ElType=".P" rngLn="17">
          <Props>
            <Prop key="Tracked variables" val="file" />
          </Props>
          <Anns>
            <Ann msg="NULL 値のキャリア: file" kind="var" />
            <Ann msg="null ポインタ間接参照のポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;p&quot; は null の可能性がある" ln="30" locFile="/FlowAnalysis/nullPointerDeref.c" ruleSAFMsg="null ポインタ間接参照のポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="30" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1708187001" ruleSCSCMsg="NULL 値のソース" FirstElSrcRngFile="/FlowAnalysis/nullPointerDeref.c" rule.header="null ポインターの間接参照を避ける" FirstElSrcRngStartln="29" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1172535384" lang="cpp" locEndPos="0" urgent="true" locEndLn="31" goals="1," locStartln="30" sev="1" locRef="6" tool="c++test" lineHash="1708187001" locType="sr" hash="585379582" causeLocRef="6">
      <Props>
        <Prop key="Tracked variables" val="NULL 値のキャリア" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="457932120" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="30" ln="29" srcRngEndPos="0" srcRngStartln="29" srcRngStartPos="0" desc="Person* p = malloc(sizeof(Person));" ElType=".C" rngLn="29">
          <Props>
            <Prop key="Tracked variables" val="malloc(...)" />
          </Props>
          <Anns>
            <Ann msg="NULL 値のソース" kind="cause" />
            <Ann msg="NULL 値のキャリア: malloc(...)" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1708187001" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="31" ln="30" srcRngEndPos="0" srcRngStartln="30" srcRngStartPos="0" desc="p->name = name;" ElType=".P" rngLn="30">
          <Props>
            <Prop key="Tracked variables" val="p" />
          </Props>
          <Anns>
            <Ann msg="NULL 値のキャリア: p" kind="var" />
            <Ann msg="null ポインタ間接参照のポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="c の値が 1 回も使用されない" ln="40" locFile="/FlowAnalysis/nullPointerDeref.c" ruleSAFMsg="値が宣言されているポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="41" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="1175606183" ruleSCSCMsg="値が宣言されているポイント" FirstElSrcRngFile="/FlowAnalysis/nullPointerDeref.c" rule.header="未使用の値を避ける" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="149719755" lang="cpp" locEndPos="0" urgent="true" locEndLn="41" goals="1," locStartln="40" sev="3" locRef="6" tool="c++test" lineHash="1175606183" locType="sr" hash="585379582" causeLocRef="6">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1175606183" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="c = *p->reference;" ElType="CP" rngLn="40">
          <Anns>
            <Ann msg="値が宣言されているポイント" kind="cause" />
            <Ann msg="値が宣言されているポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;p->reference&quot; は null の可能性がある" ln="40" locFile="/FlowAnalysis/nullPointerDeref.c" ruleSAFMsg="null ポインタ間接参照のポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="40" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1175606183" ruleSCSCMsg="NULL 値のソース" FirstElSrcRngFile="/FlowAnalysis/nullPointerDeref.c" rule.header="null ポインターの間接参照を避ける" FirstElSrcRngStartln="39" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-290241350" lang="cpp" locEndPos="0" urgent="true" locEndLn="41" goals="1," locStartln="40" sev="1" locRef="6" tool="c++test" lineHash="1175606183" locType="sr" hash="585379582" causeLocRef="6">
      <Props>
        <Prop key="Tracked variables" val="NULL 値のキャリア" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-695983806" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="char c;" ElType="." rngLn="38" />
        <ElDesc lineHash="961893567" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="40" ln="39" srcRngEndPos="0" srcRngStartln="39" srcRngStartPos="0" desc="Person* p = createPerson(7, &quot;Alice&quot;, NULL);" ElType=".C" rngLn="39">
          <ElDescList>
            <ElDesc lineHash="457932120" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="30" ln="29" srcRngEndPos="0" srcRngStartln="29" srcRngStartPos="0" desc="Person* p = malloc(sizeof(Person));" ElType="." rngLn="29">
              <Props>
                <Prop key="Tracked variables" val="ref" />
              </Props>
              <Anns>
                <Ann msg="NULL 値のキャリア: ref" kind="var" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1708187001" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="31" ln="30" srcRngEndPos="0" srcRngStartln="30" srcRngStartPos="0" desc="p->name = name;" ElType="." rngLn="30" />
            <ElDesc lineHash="2093147993" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="32" ln="31" srcRngEndPos="0" srcRngStartln="31" srcRngStartPos="0" desc="p->personalId = id;" ElType="." rngLn="31" />
            <ElDesc lineHash="708220577" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="33" ln="32" srcRngEndPos="0" srcRngStartln="32" srcRngStartPos="0" desc="p->reference = ref;" ElType="!" rngLn="32" />
            <ElDesc lineHash="-1256394053" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="34" ln="33" srcRngEndPos="0" srcRngStartln="33" srcRngStartPos="0" desc="return p;" ElType="!" rngLn="33">
              <Props>
                <Prop key="Tracked variables" val="p->reference" />
              </Props>
              <Anns>
                <Ann msg="NULL 値のキャリア: p->reference" kind="var" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="&lt;createPerson() のパラメーター#3>" />
          </Props>
          <Anns>
            <Ann msg="NULL 値のソース" kind="cause" />
            <Ann msg="NULL 値のキャリア: &lt;createPerson() のパラメーター#3>" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1175606183" locType="sr" srcRnghash="585379582" locRef="6" srcRngFile="/FlowAnalysis/nullPointerDeref.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="c = *p->reference;" ElType=".P" rngLn="40">
          <Props>
            <Prop key="Tracked variables" val="p->reference" />
          </Props>
          <Anns>
            <Ann msg="NULL 値のキャリア: p->reference" kind="var" />
            <Ann msg="null ポインタ間接参照のポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;x&quot; は null の可能性がある" ln="9" locFile="/FlowAnalysis/nullPointerDerefBenchmark.c" ruleSAFMsg="null ポインタ間接参照のポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="70" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="-293575299" ruleSCSCMsg="NULL 値のソース" FirstElSrcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" rule.header="null ポインターの間接参照を避ける" FirstElSrcRngStartln="69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1897827450" lang="cpp" locEndPos="0" urgent="true" locEndLn="10" goals="1," locStartln="9" sev="1" locRef="7" tool="c++test" lineHash="-293575299" locType="sr" hash="-1583021683" causeLocRef="7">
      <Props>
        <Prop key="Tracked variables" val="NULL 値のキャリア" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="2035137398" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="70" ln="69" srcRngEndPos="0" srcRngStartln="69" srcRngStartPos="0" desc="x = 0;" ElType=".C" rngLn="69">
          <Props>
            <Prop key="Tracked variables" val="x" />
          </Props>
          <Anns>
            <Ann msg="NULL 値のソース" kind="cause" />
            <Ann msg="NULL 値のキャリア: x" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1669491884" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="71" ln="70" srcRngEndPos="0" srcRngStartln="70" srcRngStartPos="0" desc="if (b)" ElType="." rngLn="70">
          <Anns>
            <Ann msg="条件評価: (b != 0) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="963008959" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="73" ln="72" srcRngEndPos="0" srcRngStartln="72" srcRngStartPos="0" desc="helper1(...)" ElType="!" rngLn="72">
          <ElDescList>
            <ElDesc lineHash="1669491884" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="8" ln="7" srcRngEndPos="0" srcRngStartln="7" srcRngStartPos="0" desc="if (b)" ElType="." rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="x" />
              </Props>
              <Anns>
                <Ann msg="NULL 値のキャリア: x" kind="var" />
                <Ann msg="条件評価: (b != 0) (false)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="-293575299" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="10" ln="9" srcRngEndPos="0" srcRngStartln="9" srcRngStartPos="0" desc="return *x;" ElType=".P" rngLn="9">
              <Props>
                <Prop key="Tracked variables" val="x" />
              </Props>
              <Anns>
                <Ann msg="NULL 値のキャリア: x" kind="var" />
                <Ann msg="null ポインタ間接参照のポイント" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;x&quot; は null の可能性がある" ln="13" locFile="/FlowAnalysis/nullPointerDerefBenchmark.c" ruleSAFMsg="null ポインタ間接参照のポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="77" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="-293575299" ruleSCSCMsg="NULL 値のソース" FirstElSrcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" rule.header="null ポインターの間接参照を避ける" FirstElSrcRngStartln="76" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1601519771" lang="cpp" locEndPos="0" urgent="true" locEndLn="14" goals="1," locStartln="13" sev="1" locRef="7" tool="c++test" lineHash="-293575299" locType="sr" hash="-1583021683" causeLocRef="7">
      <Props>
        <Prop key="Tracked variables" val="NULL 値のキャリア" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="2035137398" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="77" ln="76" srcRngEndPos="0" srcRngStartln="76" srcRngStartPos="0" desc="x = 0;" ElType=".C" rngLn="76">
          <Props>
            <Prop key="Tracked variables" val="x" />
          </Props>
          <Anns>
            <Ann msg="NULL 値のソース" kind="cause" />
            <Ann msg="NULL 値のキャリア: x" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="862376838" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="78" ln="77" srcRngEndPos="0" srcRngStartln="77" srcRngStartPos="0" desc="helper2()" ElType="!" rngLn="77">
          <ElDescList>
            <ElDesc lineHash="-293575299" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="return *x;" ElType=".P" rngLn="13">
              <Props>
                <Prop key="Tracked variables" val="x" />
              </Props>
              <Anns>
                <Ann msg="NULL 値のキャリア: x" kind="var" />
                <Ann msg="null ポインタ間接参照のポイント" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;x&quot; は null の可能性がある" ln="51" locFile="/FlowAnalysis/nullPointerDerefBenchmark.c" ruleSAFMsg="null ポインタ間接参照のポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="47" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="60910973" ruleSCSCMsg="NULL 値のソース" FirstElSrcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" rule.header="null ポインターの間接参照を避ける" FirstElSrcRngStartln="46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-297032921" lang="cpp" locEndPos="0" urgent="true" locEndLn="52" goals="1," locStartln="51" sev="1" locRef="7" tool="c++test" lineHash="60910973" locType="sr" hash="-1583021683" causeLocRef="7">
      <Props>
        <Prop key="Tracked variables" val="NULL 値のキャリア" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-299073094" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="46" ln="45" srcRngEndPos="0" srcRngStartln="45" srcRngStartPos="0" desc="int* y = 0;" ElType="." rngLn="45" />
        <ElDesc lineHash="1828542768" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="47" ln="46" srcRngEndPos="0" srcRngStartln="46" srcRngStartPos="0" desc="if (x != 0)" ElType=".C" rngLn="46">
          <Props>
            <Prop key="Tracked variables" val="x" />
          </Props>
          <Anns>
            <Ann msg="NULL 値のソース" kind="cause" />
            <Ann msg="NULL 値のキャリア: x" kind="var" />
            <Ann msg="条件評価: (x != 0) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1578920847" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="49" ln="48" srcRngEndPos="0" srcRngStartln="48" srcRngStartPos="0" desc="if (y != 0)" ElType="." rngLn="48">
          <Anns>
            <Ann msg="条件評価: (y != 0) (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="60910973" locType="sr" srcRnghash="-1583021683" locRef="7" srcRngFile="/FlowAnalysis/nullPointerDerefBenchmark.c" srcRngEndLn="52" ln="51" srcRngEndPos="0" srcRngStartln="51" srcRngStartPos="0" desc="return *x;" ElType=".P" rngLn="51">
          <Props>
            <Prop key="Tracked variables" val="x" />
          </Props>
          <Anns>
            <Ann msg="NULL 値のキャリア: x" kind="var" />
            <Ann msg="null ポインタ間接参照のポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="配列 Person *[1000] の境界外にアクセスしている: cache[id] の &quot;id&quot; は不定である。次の範囲の値である可能性がある: &lt;= -1 or >= 1000" ln="23" locFile="/FlowAnalysis/arrayOutOfBounds.c" ruleSAFMsg="境界外アクセスのポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="19" rule="BD-SECURITY-ARRAY" FirstElSrcRngStartPos="0" lnHash="1552118552" ruleSCSCMsg="汚染された関数によってインデックスが定義されたポイント" FirstElSrcRngFile="/FlowAnalysis/arrayOutOfBounds.c" rule.header="汚染されたデータを配列添え字として使用しない" FirstElSrcRngStartln="18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-791967970" lang="cpp" locEndPos="0" urgent="true" locEndLn="24" goals="1," locStartln="23" sev="1" locRef="8" tool="c++test" lineHash="1552118552" locType="sr" hash="-1411136315" causeLocRef="8">
      <Props>
        <Prop key="Tracked variables" val="汚染されたデータ" />
        <Prop key="Important values" val="配列" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="521020111" locType="sr" srcRnghash="-1411136315" locRef="8" srcRngFile="/FlowAnalysis/arrayOutOfBounds.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="int id;" ElType="." rngLn="16" />
        <ElDesc lineHash="-1553784831" locType="sr" srcRnghash="-1411136315" locRef="8" srcRngFile="/FlowAnalysis/arrayOutOfBounds.c" srcRngEndLn="18" ln="17" srcRngEndPos="0" srcRngStartln="17" srcRngStartPos="0" desc="printf(&quot;Please enter person id: \n&quot;);" ElType="." rngLn="17" />
        <ElDesc lineHash="-1206504513" locType="sr" srcRnghash="-1411136315" locRef="8" srcRngFile="/FlowAnalysis/arrayOutOfBounds.c" srcRngEndLn="19" ln="18" srcRngEndPos="0" srcRngStartln="18" srcRngStartPos="0" desc="scanf(&quot;%d&quot;, &amp;id);" ElType=".C" rngLn="18">
          <Props>
            <Prop key="Tracked variables" val="id" />
            <Prop key="Important values" val="Person * cache[1000]" />
          </Props>
          <Anns>
            <Ann msg="汚染された関数によってインデックスが定義されたポイント" kind="cause" />
            <Ann msg="汚染されたデータ: id" kind="var" />
            <Ann msg="配列: Person * cache[1000]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1552118552" locType="sr" srcRnghash="-1411136315" locRef="8" srcRngFile="/FlowAnalysis/arrayOutOfBounds.c" srcRngEndLn="24" ln="23" srcRngEndPos="0" srcRngStartln="23" srcRngStartPos="0" desc="if (cache[id] == 0) {" ElType=".P" rngLn="23">
          <Props>
            <Prop key="Tracked variables" val="id" />
            <Prop key="Important values" val="Person * cache[1000]" />
          </Props>
          <Anns>
            <Ann msg="汚染されたデータ: id" kind="var" />
            <Ann msg="配列: Person * cache[1000]" kind="var" />
            <Ann msg="境界外アクセスのポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="インデックス [1...1000] で配列 &quot;cache&quot; の境界外にアクセスしている可能性がある。正しいインデックス [0...999]" ln="33" locFile="/FlowAnalysis/arrayOutOfBounds.c" ruleSAFMsg="境界外アクセスのポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="41" rule="BD-PB-ARRAY" FirstElSrcRngStartPos="0" lnHash="308957226" ruleSCSCMsg="パスの開始" FirstElSrcRngFile="/FlowAnalysis/arrayOutOfBounds.c" rule.header="配列の境界を超えてアクセスしてはならない" FirstElSrcRngStartln="40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-546067470" lang="cpp" locEndPos="0" urgent="true" locEndLn="34" goals="1," locStartln="33" sev="2" locRef="8" tool="c++test" lineHash="308957226" locType="sr" hash="-1411136315" causeLocRef="8">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1961341245" locType="sr" srcRnghash="-1411136315" locRef="8" srcRngFile="/FlowAnalysis/arrayOutOfBounds.c" srcRngEndLn="41" ln="40" srcRngEndPos="0" srcRngStartln="40" srcRngStartPos="0" desc="void clearAllCache()" ElType=".C" rngLn="40">
          <Anns>
            <Ann msg="パスの開始" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1825717159" locType="sr" srcRnghash="-1411136315" locRef="8" srcRngFile="/FlowAnalysis/arrayOutOfBounds.c" srcRngEndLn="43" ln="42" srcRngEndPos="0" srcRngStartln="42" srcRngStartPos="0" desc="clearCache(0, CACHE_SIZE /* -1 */ ); /* Uncomment to fix accessing out of bounds */" ElType="!" rngLn="42">
          <ElDescList>
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="-1411136315" locRef="8" srcRngFile="/FlowAnalysis/arrayOutOfBounds.c" srcRngEndLn="32" ln="31" srcRngEndPos="0" srcRngStartln="31" srcRngStartPos="0" desc="int i;" ElType="." rngLn="31" />
            <ElDesc lineHash="-1540506943" locType="sr" srcRnghash="-1411136315" locRef="8" srcRngFile="/FlowAnalysis/arrayOutOfBounds.c" srcRngEndLn="33" ln="32" srcRngEndPos="0" srcRngStartln="32" srcRngStartPos="0" desc="for (i = from_id; i &lt;= to_id; i++) {" ElType="." rngLn="32">
              <Anns>
                <Ann msg="ループ条件評価:(i &lt;= to_id) (true)" kind="condEval" />
                <Ann msg="ループに入る" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="308957226" locType="sr" srcRnghash="-1411136315" locRef="8" srcRngFile="/FlowAnalysis/arrayOutOfBounds.c" srcRngEndLn="34" ln="33" srcRngEndPos="0" srcRngStartln="33" srcRngStartPos="0" desc="if (cache[i] != 0) {" ElType="." rngLn="33">
              <Anns>
                <Ann msg="条件評価: (cache[i] != 0) (false を仮定)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="-1540506943" locType="sr" srcRnghash="-1411136315" locRef="8" srcRngFile="/FlowAnalysis/arrayOutOfBounds.c" srcRngEndLn="33" ln="32" srcRngEndPos="0" srcRngStartln="32" srcRngStartPos="0" desc="for (i = from_id; i &lt;= to_id; i++) {" ElType="." rngLn="32">
              <Anns>
                <Ann msg="ループ条件評価:(i &lt;= to_id) (true)" kind="condEval" />
                <Ann msg="ループに入る" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="308957226" locType="sr" srcRnghash="-1411136315" locRef="8" srcRngFile="/FlowAnalysis/arrayOutOfBounds.c" srcRngEndLn="34" ln="33" srcRngEndPos="0" srcRngStartln="33" srcRngStartPos="0" desc="if (cache[i] != 0) {" ElType=".P" rngLn="33">
              <Anns>
                <Ann msg="境界外アクセスのポイント" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="バッファー &quot;buffer&quot; (char[999] 999 バイト) 書き込み時にオーバーフローが発生する。書き込まれるバイト数 は不定である。次の範囲の値である可能性がある: >= 999" ln="21" locFile="/FlowAnalysis/bufferOverflow.c" ruleSAFMsg="バッファー オーバーフローが発生したポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="14" rule="BD-SECURITY-OVERFWR" FirstElSrcRngStartPos="0" lnHash="-402612242" ruleSCSCMsg="書き込まれる要素の数が汚染された関数によって定義されたポイント" FirstElSrcRngFile="/FlowAnalysis/bufferOverflow.c" rule.header="汚染されたデータによるバッファー書き込み時のオーバーフローを避ける" FirstElSrcRngStartln="13" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1581188397" lang="cpp" locEndPos="0" urgent="true" locEndLn="22" goals="1," locStartln="21" sev="1" locRef="9" tool="c++test" lineHash="-402612242" locType="sr" hash="226867487" causeLocRef="9">
      <Props>
        <Prop key="Tracked variables" val="汚染されたデータ" />
        <Prop key="Important values" val="汚染されたデータ" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-664043208" locType="sr" srcRnghash="226867487" locRef="9" srcRngFile="/FlowAnalysis/bufferOverflow.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="int size, character;" ElType="." rngLn="11" />
        <ElDesc lineHash="-1303763578" locType="sr" srcRnghash="226867487" locRef="9" srcRngFile="/FlowAnalysis/bufferOverflow.c" srcRngEndLn="13" ln="12" srcRngEndPos="0" srcRngStartln="12" srcRngStartPos="0" desc="printf(&quot;Please enter filling parameters: \n&quot;);" ElType="." rngLn="12" />
        <ElDesc lineHash="-2063599685" locType="sr" srcRnghash="226867487" locRef="9" srcRngFile="/FlowAnalysis/bufferOverflow.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="scanf(&quot;%d%d&quot;, &amp;size, &amp;character);" ElType=".C" rngLn="13">
          <Props>
            <Prop key="Tracked variables" val="size" />
            <Prop key="Important values" val="char buffer[999]" />
          </Props>
          <Anns>
            <Ann msg="書き込まれる要素の数が汚染された関数によって定義されたポイント" kind="cause" />
            <Ann msg="汚染されたデータ: size" kind="var" />
            <Ann msg="汚染されたデータ: char buffer[999]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-402612242" locType="sr" srcRnghash="226867487" locRef="9" srcRngFile="/FlowAnalysis/bufferOverflow.c" srcRngEndLn="22" ln="21" srcRngEndPos="0" srcRngStartln="21" srcRngStartPos="0" desc="memset(buffer, character, size); /* POSSIBLE BUFFER OVERFLOW HERE */" ElType=".P" rngLn="21">
          <Props>
            <Prop key="Tracked variables" val="size" />
            <Prop key="Important values" val="char buffer[999]" />
          </Props>
          <Anns>
            <Ann msg="汚染されたデータ: size" kind="var" />
            <Ann msg="汚染されたデータ: char buffer[999]" kind="var" />
            <Ann msg="バッファー オーバーフローが発生したポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="i の値が 1 回も使用されない" ln="26" locFile="/FlowAnalysis/bufferOverflow.c" ruleSAFMsg="値が宣言されているポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="27" rule="BD-PB-VOVR" FirstElSrcRngStartPos="0" lnHash="1679375043" ruleSCSCMsg="値が宣言されているポイント" FirstElSrcRngFile="/FlowAnalysis/bufferOverflow.c" rule.header="未使用の値を避ける" FirstElSrcRngStartln="26" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1381482223" lang="cpp" locEndPos="0" urgent="true" locEndLn="27" goals="1," locStartln="26" sev="3" locRef="9" tool="c++test" lineHash="1679375043" locType="sr" hash="226867487" causeLocRef="9">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1679375043" locType="sr" srcRnghash="226867487" locRef="9" srcRngFile="/FlowAnalysis/bufferOverflow.c" srcRngEndLn="27" ln="26" srcRngEndPos="0" srcRngStartln="26" srcRngStartPos="0" desc="int i;" ElType="CP" rngLn="26">
          <Anns>
            <Ann msg="値が宣言されているポイント" kind="cause" />
            <Ann msg="値が宣言されているポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="バッファー &quot;buffer&quot; (char[999] 999 バイト) 書き込み時にオーバーフローが発生する。書き込まれるバイト数 = 1000" ln="27" locFile="/FlowAnalysis/bufferOverflow.c" ruleSAFMsg="バッファー オーバーフローが発生したポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="28" rule="BD-PB-OVERFWR" FirstElSrcRngStartPos="0" lnHash="1283866216" ruleSCSCMsg="書き込まれる要素の数が定義されたポイント" FirstElSrcRngFile="/FlowAnalysis/bufferOverflow.c" rule.header="バッファー書き込み時のオーバーフローを避ける" FirstElSrcRngStartln="27" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1570707077" lang="cpp" locEndPos="0" urgent="true" locEndLn="28" goals="1," locStartln="27" sev="1" locRef="9" tool="c++test" lineHash="1283866216" locType="sr" hash="226867487" causeLocRef="9">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1212873409" locType="sr" srcRnghash="226867487" locRef="9" srcRngFile="/FlowAnalysis/bufferOverflow.c" srcRngEndLn="34" ln="33" srcRngEndPos="0" srcRngStartln="33" srcRngStartPos="0" desc="resetBuffer(1000 /* BUFFER_SIZE */); /* POSSIBLE BUFFER OVERFLOW HERE */" ElType="!" rngLn="33">
          <ElDescList>
            <ElDesc lineHash="1679375043" locType="sr" srcRnghash="226867487" locRef="9" srcRngFile="/FlowAnalysis/bufferOverflow.c" srcRngEndLn="27" ln="26" srcRngEndPos="0" srcRngStartln="26" srcRngStartPos="0" desc="int i;" ElType="." rngLn="26" />
            <ElDesc lineHash="1283866216" locType="sr" srcRnghash="226867487" locRef="9" srcRngFile="/FlowAnalysis/bufferOverflow.c" srcRngEndLn="28" ln="27" srcRngEndPos="0" srcRngStartln="27" srcRngStartPos="0" desc="memset(buffer, 0, size);" ElType="CP" rngLn="27">
              <Anns>
                <Ann msg="書き込まれる要素の数が定義されたポイント" kind="cause" />
                <Ann msg="バッファー オーバーフローが発生したポイント" kind="point" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="条件 &quot;!volumetric&quot; は常に true に評価される" ln="16" locFile="/FlowAnalysis/unreachableCode.c" ruleSAFMsg="意味を持たない条件が使用されたポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="12" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="-187791626" ruleSCSCMsg="パスの開始" FirstElSrcRngFile="/FlowAnalysis/unreachableCode.c" rule.header="常に同じ値に評価される条件式を避ける" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-986365914" lang="cpp" locEndPos="0" urgent="true" locEndLn="17" goals="1," locStartln="16" sev="2" locRef="10" tool="c++test" lineHash="-187791626" locType="sr" hash="1398926183" causeLocRef="10">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1480948708" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="static void guessFigure(int round, int volumetric)" ElType=".C" rngLn="11">
          <Anns>
            <Ann msg="パスの開始" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1057660582" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int figure;" ElType="." rngLn="13" />
        <ElDesc lineHash="698448873" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="if (round &amp;&amp; volumetric) {" ElType="!" rngLn="14">
          <Anns>
            <Ann msg="条件評価: (round != 0) (true を仮定)" kind="condEval" />
            <Ann msg="条件評価: (volumetric != 0) (false を仮定)" kind="condEval" />
            <Ann msg="条件評価: round &amp;&amp; volumetric (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-187791626" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="} else if (round &amp;&amp; !volumetric) {" ElType=".P" rngLn="16">
          <Anns>
            <Ann msg="条件評価: (round != 0) (true)" kind="condEval" />
            <Ann msg="意味を持たない条件が使用されたポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="条件 &quot;!round&quot; は常に true に評価される" ln="18" locFile="/FlowAnalysis/unreachableCode.c" ruleSAFMsg="意味を持たない条件が使用されたポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="12" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="-1388792196" ruleSCSCMsg="パスの開始" FirstElSrcRngFile="/FlowAnalysis/unreachableCode.c" rule.header="常に同じ値に評価される条件式を避ける" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1780134809" lang="cpp" locEndPos="0" urgent="true" locEndLn="19" goals="1," locStartln="18" sev="2" locRef="10" tool="c++test" lineHash="-1388792196" locType="sr" hash="1398926183" causeLocRef="10">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1480948708" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="static void guessFigure(int round, int volumetric)" ElType=".C" rngLn="11">
          <Anns>
            <Ann msg="パスの開始" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1057660582" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int figure;" ElType="." rngLn="13" />
        <ElDesc lineHash="698448873" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="if (round &amp;&amp; volumetric) {" ElType="!" rngLn="14">
          <Anns>
            <Ann msg="条件評価: (round != 0) (false を仮定)" kind="condEval" />
            <Ann msg="条件評価: round &amp;&amp; volumetric (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-187791626" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="17" ln="16" srcRngEndPos="0" srcRngStartln="16" srcRngStartPos="0" desc="} else if (round &amp;&amp; !volumetric) {" ElType="." rngLn="16">
          <Anns>
            <Ann msg="条件評価: (round != 0) (false)" kind="condEval" />
            <Ann msg="条件評価: round &amp;&amp; !volumetric (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1388792196" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="19" ln="18" srcRngEndPos="0" srcRngStartln="18" srcRngStartPos="0" desc="} else if (!round &amp;&amp; volumetric) {" ElType=".P" rngLn="18">
          <Anns>
            <Ann msg="意味を持たない条件が使用されたポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="到達不可能なブランチ: &quot;case HEMISPHERE&quot;" ln="24" locFile="/FlowAnalysis/unreachableCode.c" ruleSAFMsg="到達不可能なブランチがある switch が定義されたポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="12" rule="BD-PB-SWITCH" FirstElSrcRngStartPos="0" lnHash="62977572" ruleSCSCMsg="パスの開始" FirstElSrcRngFile="/FlowAnalysis/unreachableCode.c" rule.header="switch 文には到達できないブランチがあってはならない" FirstElSrcRngStartln="11" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1843097203" lang="cpp" locEndPos="0" urgent="true" locEndLn="25" goals="1," locStartln="24" sev="2" locRef="10" tool="c++test" lineHash="62977572" locType="sr" hash="1398926183" causeLocRef="10">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1480948708" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="12" ln="11" srcRngEndPos="0" srcRngStartln="11" srcRngStartPos="0" desc="static void guessFigure(int round, int volumetric)" ElType=".C" rngLn="11">
          <Anns>
            <Ann msg="パスの開始" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1057660582" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="14" ln="13" srcRngEndPos="0" srcRngStartln="13" srcRngStartPos="0" desc="int figure;" ElType="." rngLn="13" />
        <ElDesc lineHash="698448873" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="15" ln="14" srcRngEndPos="0" srcRngStartln="14" srcRngStartPos="0" desc="if (round &amp;&amp; volumetric) {" ElType="." rngLn="14">
          <Anns>
            <Ann msg="条件評価: (round != 0) (true を仮定)" kind="condEval" />
            <Ann msg="条件評価: (volumetric != 0) (true を仮定)" kind="condEval" />
            <Ann msg="条件評価: round &amp;&amp; volumetric (true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-793927953" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="figure = SPHERE;" ElType="!" rngLn="15" />
        <ElDesc lineHash="62977572" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="25" ln="24" srcRngEndPos="0" srcRngStartln="24" srcRngStartPos="0" desc="switch (figure) {" ElType=".P" rngLn="24">
          <Anns>
            <Ann msg="到達不可能なブランチがある switch が定義されたポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="条件 &quot;(int)*cur >= 97&quot; は常に false に評価される" ln="51" locFile="/FlowAnalysis/unreachableCode.c" ruleSAFMsg="意味を持たない条件が使用されたポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="45" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="1747727699" ruleSCSCMsg="パスの開始" FirstElSrcRngFile="/FlowAnalysis/unreachableCode.c" rule.header="常に同じ値に評価される条件式を避ける" FirstElSrcRngStartln="44" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1003792216" lang="cpp" locEndPos="0" urgent="true" locEndLn="52" goals="1," locStartln="51" sev="2" locRef="10" tool="c++test" lineHash="1747727699" locType="sr" hash="1398926183" causeLocRef="10">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1739736142" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="45" ln="44" srcRngEndPos="0" srcRngStartln="44" srcRngStartPos="0" desc="static void checkRange(char* cur)" ElType=".C" rngLn="44">
          <Anns>
            <Ann msg="パスの開始" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="207315533" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="47" ln="46" srcRngEndPos="0" srcRngStartln="46" srcRngStartPos="0" desc="if ((*cur &lt; '0') || (*cur > '9')) {" ElType="." rngLn="46">
          <Anns>
            <Ann msg="条件評価: (*cur &lt; 48) (false を仮定)" kind="condEval" />
            <Ann msg="条件評価: (*cur > 57) (false を仮定)" kind="condEval" />
            <Ann msg="条件評価: (*cur &lt; '0') || (*cur > '9') (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1747727699" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="52" ln="51" srcRngEndPos="0" srcRngStartln="51" srcRngStartPos="0" desc="if ((*cur >= 'a') &amp;&amp; (*cur &lt;= 'f')) {" ElType=".P" rngLn="51">
          <Anns>
            <Ann msg="意味を持たない条件が使用されたポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="条件 &quot;(*cur >= 'a') &amp;&amp; (*cur &lt;= 'f')&quot; は常に false に評価される" ln="51" locFile="/FlowAnalysis/unreachableCode.c" ruleSAFMsg="意味を持たない条件が使用されたポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="45" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="1747727699" ruleSCSCMsg="パスの開始" FirstElSrcRngFile="/FlowAnalysis/unreachableCode.c" rule.header="常に同じ値に評価される条件式を避ける" FirstElSrcRngStartln="44" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="794342911" lang="cpp" locEndPos="0" urgent="true" locEndLn="52" goals="1," locStartln="51" sev="2" locRef="10" tool="c++test" lineHash="1747727699" locType="sr" hash="1398926183" causeLocRef="10">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1739736142" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="45" ln="44" srcRngEndPos="0" srcRngStartln="44" srcRngStartPos="0" desc="static void checkRange(char* cur)" ElType=".C" rngLn="44">
          <Anns>
            <Ann msg="パスの開始" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="207315533" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="47" ln="46" srcRngEndPos="0" srcRngStartln="46" srcRngStartPos="0" desc="if ((*cur &lt; '0') || (*cur > '9')) {" ElType="." rngLn="46">
          <Anns>
            <Ann msg="条件評価: (*cur &lt; 48) (false を仮定)" kind="condEval" />
            <Ann msg="条件評価: (*cur > 57) (false を仮定)" kind="condEval" />
            <Ann msg="条件評価: (*cur &lt; '0') || (*cur > '9') (false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1747727699" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="52" ln="51" srcRngEndPos="0" srcRngStartln="51" srcRngStartPos="0" desc="if ((*cur >= 'a') &amp;&amp; (*cur &lt;= 'f')) {" ElType=".P" rngLn="51">
          <Anns>
            <Ann msg="条件評価: (*cur >= 97) (false)" kind="condEval" />
            <Ann msg="意味を持たない条件が使用されたポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;cur&quot; が間接参照の後に null チェックされている" ln="63" locFile="/FlowAnalysis/unreachableCode.c" ruleSAFMsg="null チェックのポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="59" rule="BD-PB-DEREF" FirstElSrcRngStartPos="0" lnHash="219043974" ruleSCSCMsg="間接参照のポイント" FirstElSrcRngFile="/FlowAnalysis/unreachableCode.c" rule.header="間接参照の後に null チェックしない" FirstElSrcRngStartln="58" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1441502352" lang="cpp" locEndPos="0" urgent="true" locEndLn="64" goals="1," locStartln="63" sev="2" locRef="10" tool="c++test" lineHash="219043974" locType="sr" hash="1398926183" causeLocRef="10">
      <Props>
        <Prop key="Tracked variables" val="重要な値" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="1138493433" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="59" ln="58" srcRngEndPos="0" srcRngStartln="58" srcRngStartPos="0" desc="if (cur[0] == '-') {" ElType=".C" rngLn="58">
          <Props>
            <Prop key="Tracked variables" val="cur != null" />
          </Props>
          <Anns>
            <Ann msg="間接参照のポイント" kind="cause" />
            <Ann msg="重要な値: cur != null" kind="var" />
            <Ann msg="条件評価: (cur[0] == 45) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="219043974" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="64" ln="63" srcRngEndPos="0" srcRngStartln="63" srcRngStartPos="0" desc="if (cur == 0) {" ElType=".P" rngLn="63">
          <Props>
            <Prop key="Tracked variables" val="cur != null" />
          </Props>
          <Anns>
            <Ann msg="重要な値: cur != null" kind="var" />
            <Ann msg="null チェックのポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="条件 &quot;cur == 0&quot; は常に false に評価される" ln="63" locFile="/FlowAnalysis/unreachableCode.c" ruleSAFMsg="意味を持たない条件が使用されたポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="57" rule="BD-PB-CC" FirstElSrcRngStartPos="0" lnHash="219043974" ruleSCSCMsg="パスの開始" FirstElSrcRngFile="/FlowAnalysis/unreachableCode.c" rule.header="常に同じ値に評価される条件式を避ける" FirstElSrcRngStartln="56" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1312003114" lang="cpp" locEndPos="0" urgent="true" locEndLn="64" goals="1," locStartln="63" sev="2" locRef="10" tool="c++test" lineHash="219043974" locType="sr" hash="1398926183" causeLocRef="10">
      <Props />
      <ElDescList>
        <ElDesc lineHash="1824344440" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="57" ln="56" srcRngEndPos="0" srcRngStartln="56" srcRngStartPos="0" desc="static void checkSequence(char cur[])" ElType=".C" rngLn="56">
          <Anns>
            <Ann msg="パスの開始" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1138493433" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="59" ln="58" srcRngEndPos="0" srcRngStartln="58" srcRngStartPos="0" desc="if (cur[0] == '-') {" ElType="." rngLn="58">
          <Anns>
            <Ann msg="条件評価: (cur[0] == 45) (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="219043974" locType="sr" srcRnghash="1398926183" locRef="10" srcRngFile="/FlowAnalysis/unreachableCode.c" srcRngEndLn="64" ln="63" srcRngEndPos="0" srcRngStartln="63" srcRngStartPos="0" desc="if (cur == 0) {" ElType=".P" rngLn="63">
          <Anns>
            <Ann msg="意味を持たない条件が使用されたポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="メソッド fread から返される値をチェックするべきである" ln="29" locFile="/FlowAnalysis/sqlInjection.c" ruleSAFMsg="返された値をここまでにチェックするべきポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="30" rule="BD-PB-CHECKRETGEN" FirstElSrcRngStartPos="0" lnHash="-511599591" ruleSCSCMsg="メソッド呼び出し" FirstElSrcRngFile="/FlowAnalysis/sqlInjection.c" rule.header="常に非 void 関数の戻り値をチェックする" FirstElSrcRngStartln="29" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1444759334" lang="cpp" locEndPos="0" urgent="true" locEndLn="30" goals="1," locStartln="29" sev="2" locRef="11" tool="c++test" lineHash="-511599591" locType="sr" hash="-1138451494" causeLocRef="11">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-905220607" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="27" ln="26" srcRngEndPos="0" srcRngStartln="26" srcRngStartPos="0" desc="char parametersString[BUF_SIZE];" ElType="." rngLn="26" />
        <ElDesc lineHash="-559634335" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="28" ln="27" srcRngEndPos="0" srcRngStartln="27" srcRngStartPos="0" desc="char request[BUF_SIZE];" ElType="." rngLn="27" />
        <ElDesc lineHash="-511599591" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="30" ln="29" srcRngEndPos="0" srcRngStartln="29" srcRngStartPos="0" desc="fread(parametersString, 1, BUF_SIZE, file);" ElType="CP" rngLn="29">
          <Anns>
            <Ann msg="メソッド呼び出し" kind="cause" />
            <Ann msg="返された値をここまでにチェックするべきポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="SQLクエリー への ファイルからのデータ (request[]) のインジェクション" ln="35" locFile="/FlowAnalysis/sqlInjection.c" ruleSAFMsg="危険なメソッド呼び出し" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="30" rule="BD-SECURITY-TDSQL" FirstElSrcRngStartPos="0" lnHash="2001837733" ruleSCSCMsg="汚染ポイント" FirstElSrcRngFile="/FlowAnalysis/sqlInjection.c" rule.header="SQL インジェクションから防御する" FirstElSrcRngStartln="29" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1002857568" lang="cpp" locEndPos="0" urgent="true" locEndLn="36" goals="1," locStartln="35" sev="1" locRef="11" tool="c++test" lineHash="2001837733" locType="sr" hash="-1138451494" causeLocRef="11">
      <Props>
        <Prop key="Tracked variables" val="汚染されたデータ" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-905220607" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="27" ln="26" srcRngEndPos="0" srcRngStartln="26" srcRngStartPos="0" desc="char parametersString[BUF_SIZE];" ElType="." rngLn="26" />
        <ElDesc lineHash="-559634335" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="28" ln="27" srcRngEndPos="0" srcRngStartln="27" srcRngStartPos="0" desc="char request[BUF_SIZE];" ElType="." rngLn="27" />
        <ElDesc lineHash="-511599591" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="30" ln="29" srcRngEndPos="0" srcRngStartln="29" srcRngStartPos="0" desc="fread(parametersString, 1, BUF_SIZE, file);" ElType=".C" rngLn="29">
          <Props>
            <Prop key="Tracked variables" val="parametersString[]" />
          </Props>
          <Anns>
            <Ann msg="汚染ポイント" kind="cause" />
            <Ann msg="汚染されたデータ: parametersString[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1599126410" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="31" ln="30" srcRngEndPos="0" srcRngStartln="30" srcRngStartPos="0" desc="strcpy(request, requestBeginning);" ElType="." rngLn="30" />
        <ElDesc lineHash="-1251525233" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="32" ln="31" srcRngEndPos="0" srcRngStartln="31" srcRngStartPos="0" desc="extractUsername(...)" ElType="!" rngLn="31">
          <ElDescList>
            <ElDesc lineHash="1599599919" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="16" ln="15" srcRngEndPos="0" srcRngStartln="15" srcRngStartPos="0" desc="return s;" ElType="!" rngLn="15">
              <Props>
                <Prop key="Tracked variables" val="s[]" />
              </Props>
              <Anns>
                <Ann msg="汚染されたデータ: s[]" kind="var" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1251525233" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="32" ln="31" srcRngEndPos="0" srcRngStartln="31" srcRngStartPos="0" desc="strcat(request, extractUsername(parametersString));" ElType="." rngLn="31" />
        <ElDesc lineHash="1521663516" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="33" ln="32" srcRngEndPos="0" srcRngStartln="32" srcRngStartPos="0" desc="strcat(request, requestPassword);" ElType="." rngLn="32" />
        <ElDesc lineHash="377084628" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="34" ln="33" srcRngEndPos="0" srcRngStartln="33" srcRngStartPos="0" desc="extractPassword(...)" ElType="!" rngLn="33">
          <ElDescList>
            <ElDesc lineHash="1599599919" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="22" ln="21" srcRngEndPos="0" srcRngStartln="21" srcRngStartPos="0" desc="return s;" ElType="!" rngLn="21">
              <Props>
                <Prop key="Tracked variables" val="s[]" />
              </Props>
              <Anns>
                <Ann msg="汚染されたデータ: s[]" kind="var" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="377084628" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="34" ln="33" srcRngEndPos="0" srcRngStartln="33" srcRngStartPos="0" desc="strcat(request, extractPassword(parametersString));" ElType="!" rngLn="33" />
        <ElDesc lineHash="970597736" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="35" ln="34" srcRngEndPos="0" srcRngStartln="34" srcRngStartPos="0" desc="strcat(request, requestEnding);" ElType="." rngLn="34">
          <Props>
            <Prop key="Tracked variables" val="request[]" />
          </Props>
          <Anns>
            <Ann msg="汚染されたデータ: request[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2001837733" locType="sr" srcRnghash="-1138451494" locRef="11" srcRngFile="/FlowAnalysis/sqlInjection.c" srcRngEndLn="36" ln="35" srcRngEndPos="0" srcRngStartln="35" srcRngStartPos="0" desc="SQLExecDirect(statementHandle, (SQLCHAR *)request, strlen(request));" ElType=".P" rngLn="35">
          <Props>
            <Prop key="Tracked variables" val="request[]" />
          </Props>
          <Anns>
            <Ann msg="汚染されたデータ: request[]" kind="var" />
            <Ann msg="危険なメソッド呼び出し" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="オーバーフロー/アンダーフローした可能性がある値の使用: total_len" ln="29" locFile="/FlowAnalysis/integerOverflow.c" ruleSAFMsg="オーバーフロー/アンダーフローした可能性がある値を使用しているポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="24" rule="BD-SECURITY-INTOVERF" FirstElSrcRngStartPos="0" lnHash="-711727233" ruleSCSCMsg="汚染された関数によって値が定義されたポイント" FirstElSrcRngFile="/FlowAnalysis/integerOverflow.c" rule.header="汚染されたデータによる整数オーバーフロー/アンダーフローを防ぐ" FirstElSrcRngStartln="23" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="933023423" lang="cpp" locEndPos="0" urgent="true" locEndLn="30" goals="1," locStartln="29" sev="1" locRef="13" tool="c++test" lineHash="-711727233" locType="sr" hash="2111655268" causeLocRef="13">
      <Props>
        <Prop key="Tracked variables" val="汚染されたデータ" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-728176747" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="19" ln="18" srcRngEndPos="0" srcRngStartln="18" srcRngStartPos="0" desc="int i, header_len;" ElType="." rngLn="18" />
        <ElDesc lineHash="1710618239" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="20" ln="19" srcRngEndPos="0" srcRngStartln="19" srcRngStartPos="0" desc="long msg_len;" ElType="." rngLn="19" />
        <ElDesc lineHash="184186530" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="21" ln="20" srcRngEndPos="0" srcRngStartln="20" srcRngStartPos="0" desc="size_t total_len;" ElType="." rngLn="20" />
        <ElDesc lineHash="339000195" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="22" ln="21" srcRngEndPos="0" srcRngStartln="21" srcRngStartPos="0" desc="char *msg;" ElType="." rngLn="21" />
        <ElDesc lineHash="762177369" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="24" ln="23" srcRngEndPos="0" srcRngStartln="23" srcRngStartPos="0" desc="recv(socket, buffer, BUFFER_SIZE, MSG_NOSIGNAL);" ElType=".C" rngLn="23">
          <ElDescList>
            <ElDesc lineHash="1599597842" locType="sr" srcRnghash="-829573575" locRef="15" srcRngFile="/FlowAnalysis/socket.h" srcRngEndLn="9" ln="8" srcRngEndPos="0" srcRngStartln="8" srcRngStartPos="0" desc="return 0;" ElType="." rngLn="8" />
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="buffer[]" />
          </Props>
          <Anns>
            <Ann msg="汚染された関数によって値が定義されたポイント" kind="cause" />
            <Ann msg="汚染されたデータ: buffer[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="63245237" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="25" ln="24" srcRngEndPos="0" srcRngStartln="24" srcRngStartPos="0" desc="msg_len = atol(buffer);" ElType="!" rngLn="24" />
        <ElDesc lineHash="1998902284" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="26" ln="25" srcRngEndPos="0" srcRngStartln="25" srcRngStartPos="0" desc="header_len = strlen(header);" ElType="." rngLn="25">
          <Props>
            <Prop key="Tracked variables" val="msg_len" />
          </Props>
          <Anns>
            <Ann msg="汚染されたデータ: msg_len" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-295809370" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="27" ln="26" srcRngEndPos="0" srcRngStartln="26" srcRngStartPos="0" desc="total_len = header_len;" ElType="." rngLn="26" />
        <ElDesc lineHash="-1332386784" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="28" ln="27" srcRngEndPos="0" srcRngStartln="27" srcRngStartPos="0" desc="total_len += msg_len; /* POSSIBLE INTEGER OVERFLOW HERE */" ElType="!" rngLn="27">
          <Anns>
            <Ann msg="オーバーフロー/アンダーフローの可能性があるポイント" kind="info" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-711727233" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="30" ln="29" srcRngEndPos="0" srcRngStartln="29" srcRngStartPos="0" desc="malloc(...)" ElType=".P" rngLn="29">
          <Props>
            <Prop key="Tracked variables" val="total_len" />
          </Props>
          <Anns>
            <Ann msg="汚染されたデータ: total_len" kind="var" />
            <Ann msg="オーバーフロー/アンダーフローした可能性がある値を使用しているポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="オーバーフロー/アンダーフローした可能性がある値の使用: total_len" ln="38" locFile="/FlowAnalysis/integerOverflow.c" ruleSAFMsg="オーバーフロー/アンダーフローした可能性がある値を使用しているポイント" FirstElSrcRngEndPos="0" auth="bji" FirstElSrcRngEndLn="24" rule="BD-SECURITY-INTOVERF" FirstElSrcRngStartPos="0" lnHash="-1145053432" ruleSCSCMsg="汚染された関数によって値が定義されたポイント" FirstElSrcRngFile="/FlowAnalysis/integerOverflow.c" rule.header="汚染されたデータによる整数オーバーフロー/アンダーフローを防ぐ" FirstElSrcRngStartln="23" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1119168259" lang="cpp" locEndPos="0" urgent="true" locEndLn="39" goals="1," locStartln="38" sev="1" locRef="13" tool="c++test" lineHash="-1145053432" locType="sr" hash="2111655268" causeLocRef="13">
      <Props>
        <Prop key="Tracked variables" val="汚染されたデータ" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-728176747" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="19" ln="18" srcRngEndPos="0" srcRngStartln="18" srcRngStartPos="0" desc="int i, header_len;" ElType="." rngLn="18" />
        <ElDesc lineHash="1710618239" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="20" ln="19" srcRngEndPos="0" srcRngStartln="19" srcRngStartPos="0" desc="long msg_len;" ElType="." rngLn="19" />
        <ElDesc lineHash="184186530" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="21" ln="20" srcRngEndPos="0" srcRngStartln="20" srcRngStartPos="0" desc="size_t total_len;" ElType="." rngLn="20" />
        <ElDesc lineHash="339000195" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="22" ln="21" srcRngEndPos="0" srcRngStartln="21" srcRngStartPos="0" desc="char *msg;" ElType="." rngLn="21" />
        <ElDesc lineHash="762177369" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="24" ln="23" srcRngEndPos="0" srcRngStartln="23" srcRngStartPos="0" desc="recv(socket, buffer, BUFFER_SIZE, MSG_NOSIGNAL);" ElType=".C" rngLn="23">
          <ElDescList>
            <ElDesc lineHash="1599597842" locType="sr" srcRnghash="-829573575" locRef="15" srcRngFile="/FlowAnalysis/socket.h" srcRngEndLn="9" ln="8" srcRngEndPos="0" srcRngStartln="8" srcRngStartPos="0" desc="return 0;" ElType="." rngLn="8" />
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="buffer[]" />
          </Props>
          <Anns>
            <Ann msg="汚染された関数によって値が定義されたポイント" kind="cause" />
            <Ann msg="汚染されたデータ: buffer[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="63245237" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="25" ln="24" srcRngEndPos="0" srcRngStartln="24" srcRngStartPos="0" desc="msg_len = atol(buffer);" ElType="!" rngLn="24" />
        <ElDesc lineHash="1998902284" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="26" ln="25" srcRngEndPos="0" srcRngStartln="25" srcRngStartPos="0" desc="header_len = strlen(header);" ElType="." rngLn="25">
          <Props>
            <Prop key="Tracked variables" val="msg_len" />
          </Props>
          <Anns>
            <Ann msg="汚染されたデータ: msg_len" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-295809370" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="27" ln="26" srcRngEndPos="0" srcRngStartln="26" srcRngStartPos="0" desc="total_len = header_len;" ElType="." rngLn="26" />
        <ElDesc lineHash="-1332386784" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="28" ln="27" srcRngEndPos="0" srcRngStartln="27" srcRngStartPos="0" desc="total_len += msg_len; /* POSSIBLE INTEGER OVERFLOW HERE */" ElType="!" rngLn="27">
          <Anns>
            <Ann msg="オーバーフロー/アンダーフローの可能性があるポイント" kind="info" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-711727233" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="30" ln="29" srcRngEndPos="0" srcRngStartln="29" srcRngStartPos="0" desc="msg = (char*)malloc(total_len); /* VIOLATION, USAGE OF OVERFLOWED VALUE */" ElType="." rngLn="29">
          <Props>
            <Prop key="Tracked variables" val="total_len" />
          </Props>
          <Anns>
            <Ann msg="汚染されたデータ: total_len" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="37614934" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="31" ln="30" srcRngEndPos="0" srcRngStartln="30" srcRngStartPos="0" desc="if (!msg) {" ElType="." rngLn="30">
          <Anns>
            <Ann msg="条件評価: !msg (false を仮定)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="191649072" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="35" ln="34" srcRngEndPos="0" srcRngStartln="34" srcRngStartPos="0" desc="strcpy(msg, header);" ElType="." rngLn="34" />
        <ElDesc lineHash="1570251949" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="37" ln="36" srcRngEndPos="0" srcRngStartln="36" srcRngStartPos="0" desc="recv(socket, msg + msg_len, msg_len, MSG_NOSIGNAL);" ElType="!" rngLn="36">
          <ElDescList>
            <ElDesc lineHash="1599597842" locType="sr" srcRnghash="-829573575" locRef="15" srcRngFile="/FlowAnalysis/socket.h" srcRngEndLn="9" ln="8" srcRngEndPos="0" srcRngStartln="8" srcRngStartPos="0" desc="return 0;" ElType="!" rngLn="8">
              <Props>
                <Prop key="Tracked variables" val="len" />
              </Props>
              <Anns>
                <Ann msg="汚染されたデータ: len" kind="var" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="-1145053432" locType="sr" srcRnghash="2111655268" locRef="13" srcRngFile="/FlowAnalysis/integerOverflow.c" srcRngEndLn="39" ln="38" srcRngEndPos="0" srcRngStartln="38" srcRngStartPos="0" desc="for (i = header_len; i &lt; total_len; i++) { /* VIOLATION, USAGE OF OVERFLOWED VALUE */" ElType=".P" rngLn="38">
          <Props>
            <Prop key="Tracked variables" val="total_len" />
          </Props>
          <Anns>
            <Ann msg="汚染されたデータ: total_len" kind="var" />
            <Ann msg="オーバーフロー/アンダーフローした可能性がある値を使用しているポイント" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
  </StdViols>

      <TestedFilesDetails>
         <Total name="合計 (抑制された)" supp="0" total="40">
            <Project id="FlowAnalysis" name="FlowAnalysis" supp="0" total="40">
               <Res loc="/FlowAnalysis/dbutil.c" locRef="1" locType="sr" name="dbutil.c" supp="0" total="0" />
               <Res loc="/FlowAnalysis/fileLeaks.c" locRef="2" locType="sr" name="fileLeaks.c" supp="0" total="4" />
               <Res loc="/FlowAnalysis/memoryLeaks.c" locRef="3" locType="sr" name="memoryLeaks.c" supp="0" total="3" />
               <Res loc="/FlowAnalysis/divisionByZero.c" locRef="4" locType="sr" name="divisionByZero.c" supp="0" total="2" />
               <Res loc="/FlowAnalysis/useBeforeInit.c" locRef="5" locType="sr" name="useBeforeInit.c" supp="0" total="7" />
               <Res loc="/FlowAnalysis/nullPointerDeref.c" locRef="6" locType="sr" name="nullPointerDeref.c" supp="0" total="5" />
               <Res loc="/FlowAnalysis/nullPointerDerefBenchmark.c" locRef="7" locType="sr" name="nullPointerDerefBenchmark.c" supp="0" total="3" />
               <Res loc="/FlowAnalysis/arrayOutOfBounds.c" locRef="8" locType="sr" name="arrayOutOfBounds.c" supp="0" total="2" />
               <Res loc="/FlowAnalysis/bufferOverflow.c" locRef="9" locType="sr" name="bufferOverflow.c" supp="0" total="3" />
               <Res loc="/FlowAnalysis/unreachableCode.c" locRef="10" locType="sr" name="unreachableCode.c" supp="0" total="7" />
               <Res loc="/FlowAnalysis/sqlInjection.c" locRef="11" locType="sr" name="sqlInjection.c" supp="0" total="2" />
               <Res loc="/FlowAnalysis/sql.c" locRef="12" locType="sr" name="sql.c" supp="0" total="0" />
               <Res loc="/FlowAnalysis/integerOverflow.c" locRef="13" locType="sr" name="integerOverflow.c" supp="0" total="2" />
               <Res loc="/FlowAnalysis/dbutil.h" locRef="14" locType="sr" name="dbutil.h" supp="0" total="0" />
               <Res loc="/FlowAnalysis/socket.h" locRef="15" locType="sr" name="socket.h" supp="0" total="0" />
               <Res loc="/FlowAnalysis/sql.h" locRef="16" locType="sr" name="sql.h" supp="0" total="0" />
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>
